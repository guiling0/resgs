!function (e) { "use strict"; const a = sgs.Package("GuozhanPowerCards"); a.addGameCards([sgs.GameCard({ name: "sha", suit: 1, number: 4 }), sgs.GameCard({ name: "jiu", suit: 1, number: 6, attr: [5] }), sgs.GameCard({ name: "sha", suit: 1, number: 7 }), sgs.GameCard({ name: "sha", suit: 1, number: 8 }), sgs.GameCard({ name: "sha", suit: 1, number: 9, attr: [2] }), sgs.GameCard({ name: "sha", suit: 1, number: 10, attr: [2] }), sgs.GameCard({ name: "sha", suit: 1, number: 11, attr: [2] }), sgs.GameCard({ name: "shan", suit: 2, number: 4 }), sgs.GameCard({ name: "shan", suit: 2, number: 5 }), sgs.GameCard({ name: "shan", suit: 2, number: 6, attr: [5] }), sgs.GameCard({ name: "shan", suit: 2, number: 7 }), sgs.GameCard({ name: "tao", suit: 2, number: 8 }), sgs.GameCard({ name: "tao", suit: 2, number: 9 }), sgs.GameCard({ name: "sha", suit: 2, number: 10 }), sgs.GameCard({ name: "sha", suit: 2, number: 11 }), sgs.GameCard({ name: "sha", suit: 3, number: 4 }), sgs.GameCard({ name: "sha", suit: 3, number: 5, attr: [2, 5] }), sgs.GameCard({ name: "sha", suit: 3, number: 6 }), sgs.GameCard({ name: "sha", suit: 3, number: 7 }), sgs.GameCard({ name: "sha", suit: 3, number: 8 }), sgs.GameCard({ name: "jiu", suit: 3, number: 9 }), sgs.GameCard({ name: "tao", suit: 4, number: 2 }), sgs.GameCard({ name: "tao", suit: 4, number: 3, attr: [5] }), sgs.GameCard({ name: "shan", suit: 4, number: 6 }), sgs.GameCard({ name: "shan", suit: 4, number: 7 }), sgs.GameCard({ name: "sha", suit: 4, number: 8, attr: [1] }), sgs.GameCard({ name: "sha", suit: 4, number: 9, attr: [1] }), sgs.GameCard({ name: "shan", suit: 4, number: 13 }), sgs.GameCard({ name: "xietianziyilingzhuhou", suit: 1, number: 1, attr: [5] }), sgs.GameCard({ name: "huoshaolianying", suit: 1, number: 3, attr: [5] }), sgs.GameCard({ name: "lulitongxin", suit: 1, number: 12, attr: [4] }), sgs.GameCard({ name: "wuxiekeji", suit: 1, number: 13 }), sgs.GameCard({ name: "lianjunshengyan", suit: 2, number: 1 }), sgs.GameCard({ name: "diaohulishan", suit: 2, number: 2 }), sgs.GameCard({ name: "huoshaolianying", suit: 2, number: 12, attr: [5] }), sgs.GameCard({ name: "shuiyanqijun", suit: 2, number: 13 }), sgs.GameCard({ name: "chiling", suit: 3, number: 3 }), sgs.GameCard({ name: "lulitongxin", suit: 3, number: 10, attr: [4] }), sgs.GameCard({ name: "huoshaolianying", suit: 3, number: 11, attr: [5] }), sgs.GameCard({ name: "shuiyanqijun", suit: 3, number: 12 }), sgs.GameCard({ name: "wuxiekeji", suit: 3, number: 13, attr: [3] }), sgs.GameCard({ name: "xietianziyilingzhuhou", suit: 4, number: 1, attr: [5] }), sgs.GameCard({ name: "xietianziyilingzhuhou", suit: 4, number: 4, attr: [5] }), sgs.GameCard({ name: "diaohulishan", suit: 4, number: 10, attr: [5] }), sgs.GameCard({ name: "wuxiekeji", suit: 4, number: 11, attr: [3] }), sgs.GameCard({ name: "mingguangkai", suit: 1, number: 2 }), sgs.GameCard({ name: "qinglongyanyuedao", suit: 1, number: 5 }), sgs.GameCard({ name: "jingfan", suit: 2, number: 3, attr: [5] }), sgs.GameCard({ name: "yuxi", suit: 3, number: 1 }), sgs.GameCard({ name: "huxinjing", suit: 3, number: 2, attr: [5] }), sgs.GameCard({ name: "muniuliuma", suit: 4, number: 5 }), sgs.GameCard({ name: "fangtianhuaji", suit: 4, number: 12 })]); const s = sgs.Package("GuozhanZhenCards"), r = sgs.Package("GuozhanShiCards"), t = sgs.Package("GuozhanBianCards"), n = sgs.Package("GuozhanQuanCards"), i = sgs.Package("GuozhanJinCards"), o = sgs.Package("GuozhanBuchenCards"); s.addGameCards([sgs.GameCard({ name: "feilongduofeng", suit: 1, number: 2 })]), r.addGameCards([sgs.GameCard({ name: "taipingyaoshu", suit: 2, number: 3 })]), t.addGameCards([sgs.GameCard({ name: "dinglanyemingzhu", suit: 4, number: 6 })]), n.addGameCards([sgs.GameCard({ name: "liulongcanjia", suit: 2, number: 13 })]), i.addGameCards([sgs.GameCard({ name: "jilinqianyi", suit: 1, number: 6 })]), o.addGameCards([sgs.GameCard({ name: "zhaoshu", suit: 3, number: 3, derived: !0 }), sgs.GameCard({ name: "haolingtianxia", suit: 1, number: 12, derived: !0 }), sgs.GameCard({ name: "kefuzhongyuan", suit: 4, number: 1, derived: !0 }), sgs.GameCard({ name: "guguoanbang", suit: 2, number: 1, derived: !0 }), sgs.GameCard({ name: "wenheluanwu", suit: 3, number: 12, derived: !0 })]); const g = sgs.Package("GuozhanStandardCards"); g.addGameCards([sgs.GameCard({ name: "sha", suit: 1, number: 5 }), sgs.GameCard({ name: "sha", suit: 1, number: 7 }), sgs.GameCard({ name: "sha", suit: 1, number: 8 }), sgs.GameCard({ name: "sha", suit: 1, number: 8 }), sgs.GameCard({ name: "sha", suit: 1, number: 9 }), sgs.GameCard({ name: "sha", suit: 1, number: 10 }), sgs.GameCard({ name: "sha", suit: 1, number: 11 }), sgs.GameCard({ name: "sha", suit: 3, number: 2 }), sgs.GameCard({ name: "sha", suit: 3, number: 3 }), sgs.GameCard({ name: "sha", suit: 3, number: 4 }), sgs.GameCard({ name: "sha", suit: 3, number: 5 }), sgs.GameCard({ name: "sha", suit: 3, number: 8 }), sgs.GameCard({ name: "sha", suit: 3, number: 9 }), sgs.GameCard({ name: "sha", suit: 3, number: 10 }), sgs.GameCard({ name: "sha", suit: 3, number: 11 }), sgs.GameCard({ name: "sha", suit: 3, number: 11 }), sgs.GameCard({ name: "sha", suit: 2, number: 10 }), sgs.GameCard({ name: "sha", suit: 2, number: 12 }), sgs.GameCard({ name: "sha", suit: 4, number: 10 }), sgs.GameCard({ name: "sha", suit: 4, number: 11 }), sgs.GameCard({ name: "sha", suit: 4, number: 12 }), sgs.GameCard({ name: "sha", suit: 2, number: 4, attr: [1] }), sgs.GameCard({ name: "sha", suit: 4, number: 4, attr: [1] }), sgs.GameCard({ name: "sha", suit: 4, number: 5, attr: [1] }), sgs.GameCard({ name: "sha", suit: 1, number: 6, attr: [2] }), sgs.GameCard({ name: "sha", suit: 1, number: 7, attr: [2] }), sgs.GameCard({ name: "sha", suit: 3, number: 6, attr: [2] }), sgs.GameCard({ name: "sha", suit: 3, number: 7, attr: [2] }), sgs.GameCard({ name: "sha", suit: 3, number: 8, attr: [2] }), sgs.GameCard({ name: "shan", suit: 2, number: 2 }), sgs.GameCard({ name: "shan", suit: 2, number: 11 }), sgs.GameCard({ name: "shan", suit: 2, number: 13 }), sgs.GameCard({ name: "shan", suit: 4, number: 2 }), sgs.GameCard({ name: "shan", suit: 4, number: 3 }), sgs.GameCard({ name: "shan", suit: 4, number: 6 }), sgs.GameCard({ name: "shan", suit: 4, number: 7 }), sgs.GameCard({ name: "shan", suit: 4, number: 7 }), sgs.GameCard({ name: "shan", suit: 4, number: 8 }), sgs.GameCard({ name: "shan", suit: 4, number: 8 }), sgs.GameCard({ name: "shan", suit: 4, number: 9 }), sgs.GameCard({ name: "shan", suit: 4, number: 10 }), sgs.GameCard({ name: "shan", suit: 4, number: 11 }), sgs.GameCard({ name: "shan", suit: 4, number: 13 }), sgs.GameCard({ name: "tao", suit: 2, number: 4 }), sgs.GameCard({ name: "tao", suit: 2, number: 6 }), sgs.GameCard({ name: "tao", suit: 2, number: 7 }), sgs.GameCard({ name: "tao", suit: 2, number: 8 }), sgs.GameCard({ name: "tao", suit: 2, number: 9 }), sgs.GameCard({ name: "tao", suit: 2, number: 10 }), sgs.GameCard({ name: "tao", suit: 2, number: 12 }), sgs.GameCard({ name: "tao", suit: 4, number: 2 }), sgs.GameCard({ name: "jiu", suit: 1, number: 9 }), sgs.GameCard({ name: "jiu", suit: 3, number: 9 }), sgs.GameCard({ name: "jiu", suit: 4, number: 9 }), sgs.GameCard({ name: "zhugeliannu", suit: 4, number: 1 }), sgs.GameCard({ name: "cixiongshuanggujian", suit: 1, number: 2 }), sgs.GameCard({ name: "qinggangjian", suit: 1, number: 6 }), sgs.GameCard({ name: "hanbingjian", suit: 1, number: 2 }), sgs.GameCard({ name: "zhangbashemao", suit: 1, number: 12 }), sgs.GameCard({ name: "zhuqueyushan", suit: 4, number: 1 }), sgs.GameCard({ name: "guanshifu", suit: 4, number: 5 }), sgs.GameCard({ name: "qilingong", suit: 2, number: 5 }), sgs.GameCard({ name: "wuliujian", suit: 4, number: 6 }), sgs.GameCard({ name: "sanjianliangrendao", suit: 4, number: 12 }), sgs.GameCard({ name: "baguazhen", suit: 1, number: 2 }), sgs.GameCard({ name: "renwangdun", suit: 3, number: 2 }), sgs.GameCard({ name: "tengjia", suit: 3, number: 2 }), sgs.GameCard({ name: "baiyinshizi", suit: 3, number: 1 }), sgs.GameCard({ name: "jueying", suit: 1, number: 5 }), sgs.GameCard({ name: "dilu", suit: 3, number: 5 }), sgs.GameCard({ name: "zhuahuangfeidian", suit: 2, number: 13 }), sgs.GameCard({ name: "chitu", suit: 2, number: 5 }), sgs.GameCard({ name: "dayuan", suit: 1, number: 13 }), sgs.GameCard({ name: "zixin", suit: 4, number: 13 }), sgs.GameCard({ name: "wugufengdeng", suit: 2, number: 3 }), sgs.GameCard({ name: "taoyuanjieyi", suit: 2, number: 1 }), sgs.GameCard({ name: "nanmanruqin", suit: 1, number: 13 }), sgs.GameCard({ name: "nanmanruqin", suit: 3, number: 7 }), sgs.GameCard({ name: "wanjianqifa", suit: 2, number: 1 }), sgs.GameCard({ name: "juedou", suit: 1, number: 1 }), sgs.GameCard({ name: "juedou", suit: 3, number: 1 }), sgs.GameCard({ name: "wuzhongshengyou", suit: 2, number: 7 }), sgs.GameCard({ name: "wuzhongshengyou", suit: 2, number: 8 }), sgs.GameCard({ name: "shunshouqianyang", suit: 1, number: 3 }), sgs.GameCard({ name: "shunshouqianyang", suit: 1, number: 4 }), sgs.GameCard({ name: "shunshouqianyang", suit: 4, number: 3 }), sgs.GameCard({ name: "guohechaiqiao", suit: 1, number: 3 }), sgs.GameCard({ name: "guohechaiqiao", suit: 1, number: 4 }), sgs.GameCard({ name: "guohechaiqiao", suit: 2, number: 12 }), sgs.GameCard({ name: "tiesuolianhuan", suit: 1, number: 12, attr: [4] }), sgs.GameCard({ name: "tiesuolianhuan", suit: 3, number: 12, attr: [4] }), sgs.GameCard({ name: "tiesuolianhuan", suit: 3, number: 13, attr: [4] }), sgs.GameCard({ name: "huogong", suit: 2, number: 2 }), sgs.GameCard({ name: "huogong", suit: 2, number: 3 }), sgs.GameCard({ name: "jiedaosharen", suit: 3, number: 12 }), sgs.GameCard({ name: "wuxiekeji", suit: 1, number: 11 }), sgs.GameCard({ name: "wuxiekeji", suit: 3, number: 13, attr: [3] }), sgs.GameCard({ name: "wuxiekeji", suit: 4, number: 12, attr: [3] }), sgs.GameCard({ name: "yiyidailao", suit: 2, number: 11 }), sgs.GameCard({ name: "yiyidailao", suit: 4, number: 4 }), sgs.GameCard({ name: "zhijizhibi", suit: 3, number: 3, attr: [4] }), sgs.GameCard({ name: "zhijizhibi", suit: 3, number: 4, attr: [4] }), sgs.GameCard({ name: "yuanjiaojingong", suit: 2, number: 9 }), sgs.GameCard({ name: "lebusishu", suit: 3, number: 6 }), sgs.GameCard({ name: "lebusishu", suit: 2, number: 6 }), sgs.GameCard({ name: "bingliangcunduan", suit: 1, number: 10 }), sgs.GameCard({ name: "bingliangcunduan", suit: 3, number: 10 }), sgs.GameCard({ name: "shandian", suit: 1, number: 1 })]); const c = sgs.General({ name: "default.shibingn", kingdom: "none", hp: 2, gender: 1, skills: [], enable: !1 }), d = sgs.General({ name: "default.shibingv", kingdom: "none", hp: 2, gender: 2, skills: [], enable: !1 }); sgs.loadTranslation({ shibingn: "士兵", shibingv: "士兵" }); const u = sgs.General({ name: "wars.ganfuren", kingdom: "shu", hp: 1.5, gender: 2 }), l = sgs.Skill({ name: "wars.ganfuren.shushen" }); l.addEffect(sgs.TriggerEffect({ auto_directline: 1, auto_log: 1, priorityType: 1, trigger: "RecoverHpAfter", can_trigger (e, a, s) { return this.isOwner(a) && s.player === a }, context: (e, a, s) => ({ maxTimes: s.number }), getSelectors (e, a) { return { skill_cost: () => { const s = a.from; return { selectors: { player: e.createChoosePlayer({ step: 1, count: 1, filter: (e, a) => e !== s }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "淑慎：你可以选择一名其他角色，让他摸一张牌", thinkPrompt: this.name } } } } }, async cost (e, a, s) { const { targets: [r] } = s; return await e.drawCards({ player: r, source: a, reason: this.name }) } })); const m = sgs.Skill({ name: "wars.ganfuren.shenzhi" }); m.addEffect(sgs.TriggerEffect({ auto_log: 1, forced: "cost", priorityType: 1, trigger: "ReadyPhaseStarted", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) && a.hasCanDropCards("h", a, a.getHandCards().length, this.name) }, async cost (e, a, s) { const { from: r } = s, t = r.getHandCards(); return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r } = s; s.cost.cards.length >= r.inthp && await e.recoverhp({ player: r, source: a, reason: this.name }) } })), u.addSkill(l), u.addSkill(m); const h = sgs.General({ name: "wars.guanyu", kingdom: "shu", hp: 2.5, gender: 1 }), p = sgs.Skill({ name: "wars.guanyu.wusheng" }); function f (e, a) { const s = a.from, r = e.createVirtualCardByNone("sha", void 0, !1); return r.custom.method = 1, { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getHandCards(!0, !0), filter: (e, a) => 1 === e.color, onChange (e, a) { "add" === e && r.addSubCard(a), "remove" === e && r.delSubCard(a), r.set(), this._use_or_play_vcard = r } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "武圣：你可以将一张红色牌当【杀】" } } } var y, w; p.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedUseCard", getSelectors: (e, a) => ({ skill_cost: () => f(e, a) }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedUseCardData)) return s.from === a && s.has("sha") }, cost: async (e, a, s) => !0 })), p.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedPlayCard", getSelectors: (e, a) => ({ skill_cost: () => f(e, a) }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedPlayCardData)) return s.from === a && s.has("sha") }, cost: async (e, a, s) => !0 })), h.addSkill(p), function (e) { e[e.None = 0] = "None", e[e.Trigger = 1] = "Trigger", e[e.State = 2] = "State" }(y || (y = {})), function (e) { e[e.Distance_Correct = 1] = "Distance_Correct", e[e.Distance_Fixed = 2] = "Distance_Fixed", e[e.NotCalcSeat = 3] = "NotCalcSeat", e[e.NotCalcDistance = 4] = "NotCalcDistance", e[e.MaxHand_Initial = 5] = "MaxHand_Initial", e[e.MaxHand_Correct = 6] = "MaxHand_Correct", e[e.MaxHand_Fixed = 7] = "MaxHand_Fixed", e[e.MaxHand_Exclude = 8] = "MaxHand_Exclude", e[e.Prohibit_Open = 9] = "Prohibit_Open", e[e.Prohibit_Close = 10] = "Prohibit_Close", e[e.Prohibit_DropCards = 11] = "Prohibit_DropCards", e[e.Prohibit_RecoverHp = 12] = "Prohibit_RecoverHp", e[e.Prohibit_UseCard = 13] = "Prohibit_UseCard", e[e.Prohibit_PlayCard = 14] = "Prohibit_PlayCard", e[e.Prohibit_Pindian = 15] = "Prohibit_Pindian", e[e.Range_Initial = 16] = "Range_Initial", e[e.Range_Correct = 17] = "Range_Correct", e[e.Range_Fixed = 18] = "Range_Fixed", e[e.Range_Within = 19] = "Range_Within", e[e.Range_Without = 20] = "Range_Without", e[e.Regard_CardData = 21] = "Regard_CardData", e[e.Regard_OnlyBig = 22] = "Regard_OnlyBig", e[e.TargetMod_PassTimeCheck = 23] = "TargetMod_PassTimeCheck", e[e.TargetMod_PassCountingTime = 24] = "TargetMod_PassCountingTime", e[e.TargetMod_CorrectTime = 25] = "TargetMod_CorrectTime", e[e.TargetMod_PassDistanceCheck = 26] = "TargetMod_PassDistanceCheck", e[e.Skill_Invalidity = 27] = "Skill_Invalidity" }(w || (w = {})); const C = sgs.General({ name: "wars.huangyueying", kingdom: "shu", hp: 1.5, gender: 2 }), _ = sgs.Skill({ name: "wars.huangyueying.jizhi" }); _.addEffect(sgs.TriggerEffect({ auto_log: 1, forced: "cost", priorityType: 1, trigger: "CardBeUse", can_trigger (e, a, s) { return this.isOwner(a) && 21 === s.card.subtype && s.from === a && !s.transform }, async cost (e, a, s) { const { from: r } = s; return await e.drawCards({ player: r, source: a, reason: this.name }) } })); const k = sgs.Skill({ name: "wars.huangyueying.qicai", tag: [1] }); k.addEffect(sgs.StateEffect({ [w.TargetMod_PassDistanceCheck] (e, a, s) { return this.isOwner(e) && 2 === sgs.utils.getCardType(a.name) } })), C.addSkill(_), C.addSkill(k); const b = sgs.General({ name: "wars.huangzhong", kingdom: "shu", hp: 2, gender: 1 }), G = sgs.Skill({ name: "wars.huangzhong.liegong" }); G.addEffect(sgs.TriggerEffect({ auto_directline: 1, auto_log: 1, forced: "cost", priorityType: 1, trigger: "AssignTargeted", can_trigger (e, a, s) { if (this.isOwner(a) && "sha" === s.card.name && s.from === a) { if (e.getCurrentPhase().isOwner(a, 4)) { const e = s.current.target.getHandCards().length; return e >= a.hp || e <= a.range } } }, context: (e, a, s) => ({ targets: [s.current.target] }), async cost (e, a, s) { const { targets: r } = s; return await a.targetCantResponse(r) } })), b.addSkill(G); const T = sgs.General({ name: "wars.liubei", kingdom: "shu", hp: 2, gender: 1 }), S = sgs.Skill({ name: "wars.liubei.rende" }); S.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "PlayPhaseProceeding", getSelectors (e, a) { const s = this; return { skill_cost: () => { const r = a.from; return { selectors: { card: e.createChooseCard({ step: 1, count: [1, -1], selectable: r.getHandCards() }), player: e.createChoosePlayer({ step: 2, count: 1, filter: (e, a) => e !== r && !e.hasMark(s.name) }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "仁德，你可以将任意张牌交给一名其他角色" } } }, viewuse: () => { const s = a.from; let r = []; return e.cardNames.filter((e => 1 === sgs.utils.getCardType(e))).forEach((a => { r.push(...e.createVData({ name: a })) })), r.forEach((e => { e.custom.method = 1, e.custom.canuse = s.canUseCard(e, void 0, this.name) })), { selectors: { card: e.createChooseVCard({ step: 1, count: 1, selectable: r, filter: (e, a) => e.custom.canuse, onChange (a, s) { "add" === a && (this._use_or_play_vcard = e.createVirtualCardByData(s, !1)) } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "仁德，你可以视为使用一张基本牌", thinkPrompt: this.name } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) }, context: (e, a, s) => ({ maxTimes: -1 }), async cost (e, a, s) { const { from: r, cards: t, targets: [n] } = s; return await e.giveCards({ from: r, to: n, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r, targets: [t] } = s, n = s.cost; t.setMark(this.name, !0); const i = this.getData(this.name) ?? 0, o = i + n.getMoveCount(); this.setData(this.name, o), o >= 2 && i < 2 && await e.preUseCard({ from: r, can_use_cards: e.cardNames.filter((e => 1 === sgs.utils.getCardType(e))).map((e => `${e}-1`)), cardSelector: { effectId: this.id, name: "viewuse", context: s }, source: a, reason: this.name }) }, lifecycle: [{ trigger: "TurnEnded", priority: "after", async on_exec (e, a) { this.isOwner(a.player) && (this.removeData(this.name), e.players.forEach((e => e.removeMark(this.name)))) } }] })), T.addSkill(S); const E = sgs.General({ name: "wars.liushan", kingdom: "shu", hp: 1.5, gender: 1 }), P = sgs.Skill({ name: "wars.liushan.fangquan" }); P.addEffect(sgs.TriggerEffect({ auto_log: 1, forced: "cost", audio: ["liushan/fangquan1"], priorityType: 1, trigger: "PlayPhaseStart", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) && e.currentTurn.isNotSkip(4) }, async cost (e, a, s) { await e.currentTurn.skipPhase(); return (await e.addEffect("fangquan.delay", this.player)).setData("turn", e.currentTurn), !0 } })), sgs.TriggerEffect({ name: "fangquan.delay", auto_directline: 1, audio: ["liushan/fangquan2"], priorityType: 1, trigger: "TurnEnd", can_trigger (e, a, s) { return this.isOwner(a) && s === this.getData("turn") }, getSelectors: (e, a) => ({ skill_cost: () => { const s = a.from; return { selectors: { card: e.createDropCards(s, { step: 1, count: 1, selectable: s.getHandCards() }), target: e.createChoosePlayer({ step: 2, count: 1, filter: (e, a) => e != s }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "放权，你可以选择一名其他角色，令他获得一个额外回合", thinkPrompt: "放权" } } } }), async cost (e, a, s) { const { from: r, cards: t } = s; return await this.removeSelf(), await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { targets: [r] } = s; e.extraTurns.push(r) }, lifecycle: [{ trigger: "TurnEnded", priority: "after", async on_exec (e, a) { await this.removeSelf() } }] }); const D = sgs.Skill({ name: "wars.liushan.xiangle", tag: [1] }); D.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "BecomeTargeted", getSelectors (e, a) { return { choose: () => { const s = a.targets.at(0); return { selectors: { card: e.createDropCards(s, { step: 1, count: 1, selectable: s.getHandCards(), filter: (e, a) => 1 === e.type }) }, options: { canCancle: !0, showMainButtons: !0, prompt: `享乐，你需要弃置一张基本牌，否则【杀】对${a.from?.gameName}无效`, thinkPrompt: this.name } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && "sha" === s.card.name && s.current.target === a }, async cost (e, a, s) { s.targets = [a.from]; const r = await e.doRequest({ player: a.from, get_selectors: { effectId: this.id, name: "choose", context: s } }), t = e.getResultCards(r); return await e.dropCards({ player: a.from, cards: t, source: a, reason: this.name }) || await a.invalidCurrent(), !0 } })), E.addSkill(P), E.addSkill(D); const v = sgs.General({ name: "wars.machao", kingdom: "shu", hp: 2, gender: 1 }), x = sgs.Skill({ name: "wars.machao.mashu", tag: [1] }); x.addEffect(sgs.StateEffect({ [w.Distance_Correct] (e, a) { if (this.isOwner(e)) return -1 } })); const j = sgs.Skill({ name: "wars.machao.tieqi" }); j.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, forced: "cost", priorityType: 1, trigger: "AssignTargeted", getSelectors: (e, a) => ({ choose_general: () => { const s = e.getGenerals(a.generals); return { selectors: { general: e.createChooseGeneral({ step: 1, count: 1, selectable: s, selecte_type: "win", windowOptions: { title: "铁骑", timebar: e.responseTime, prompt: "铁骑：请选择一张武将牌令所有武将技能失效" } }) }, options: { canCancle: !1, showMainButtons: !1, thinkPrompt: "铁骑" } } }, choose_card: () => { const s = a.targets.at(0); return { selectors: { card: e.createDropCards(s, { step: 2, count: 1, selectable: s.getSelfCards(), filter: (e, s) => e.suit === a.suit }) }, options: { canCancle: !0, showMainButtons: !0, prompt: `铁骑，你需要弃置一张${sgs.getTranslation("suit" + a.suit)}牌，否则不能响应【杀】`, thinkPrompt: "铁骑" } } } }), can_trigger (e, a, s) { return this.isOwner(a) && "sha" === s.card.name && s.from === a }, context: (e, a, s) => ({ targets: [s.current.target] }), async cost (e, a, s) { const { from: r } = s; return await e.judge({ player: r, isSucc: e => !0, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r, targets: [t] } = s, n = s.cost; if (n?.success) { const i = t.getGenerls(); let o; if (i.length > 1) { s.generals = e.getGeneralIds(i); o = (await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose_general", context: s } })).result.results.general.result.at(0) } else i.length > 0 && (o = i.at(0)); let g = t.getMark("marks.tieqi"); if (o === t.head && (g = g ? "all" : "head"), o === t.deputy && (g = g ? "all" : "deputy"), t.setMark("marks.tieqi", g, { visible: !0 }), !this.getData("invalids")) { const a = await e.addEffect("tieqi.invalids"); this.setData("invalids", a), a.setData("turn", e.currentTurn) } s.suit = n.card?.suit; const c = await e.doRequest({ player: t, get_selectors: { effectId: this.id, name: "choose_card", context: s } }), d = e.getResultCards(c); await e.dropCards({ player: t, cards: d, source: a, reason: this.name }) || await a.targetCantResponse([t]) } } })), sgs.StateEffect({ name: "tieqi.invalids", [w.Skill_Invalidity] (e) { if (e.player && e.sourceGeneral) { const a = e.player.getMark("marks.tieqi"); if ("head" === a && e.sourceGeneral === e.player.head) return !0; if ("deputy" === a && e.sourceGeneral === e.player.deputy) return !0; if ("all" === a) return !0 } }, lifecycle: [{ trigger: "TurnEnded", priority: "after", async on_exec (e, a) { a === this.getData("turn") && (e.players.forEach((e => e.removeMark("marks.tieqi"))), await this.removeSelf()) } }] }), v.addSkill(x), v.addSkill(j); const O = sgs.General({ name: "wars.menghuo", kingdom: "shu", hp: 2, gender: 1 }), z = sgs.Skill({ name: "wars.menghuo.huoshou", tag: [1] }); z.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "CardEffectStart", can_trigger (e, a, s) { return this.isOwner(a) && "nanmanruqin" === s.card.name && s.current.target === a }, cost: async (e, a, s) => await a.invalidCurrent() })), z.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "CardBeUse", can_trigger (e, a, s) { return this.isOwner(a) && "nanmanruqin" === s.card.name && s.from !== a }, async cost (e, a, s) { const { from: r } = s; return (await e.addEffect("huoshou.delay", r)).setData("use", a), !0 } })), sgs.TriggerEffect({ audio: [], priorityType: 1, trigger: "DamageStart", can_trigger (e, a, s) { return this.isOwner(a) && s.source === this.getData("use") && s.from !== a }, cost: async (e, a, s) => (a.from = s.from, !0), lifecycle: [{ trigger: "UseCardEnd3", priority: "after", async on_exec (e, a) { a === this.getData("use") && await this.removeSelf() } }] }); const M = sgs.Skill({ name: "wars.menghuo.zaiqi" }); M.addEffect(sgs.TriggerEffect({ auto_log: 1, forced: "cost", priorityType: 1, trigger: "DrawPhaseStartedAfter", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) && a.losshp > 0 && s.ratedDrawnum > 0 }, cost: async (e, a, s) => (a.ratedDrawnum = 0, !0), async effect (e, a, s) { const { from: r } = s, t = await e.getNCards(r.losshp); await e.flashCards({ player: r, cards: t, source: a, reason: this.name }), await e.delay(1); const n = t.filter((e => 2 === e.suit)); await e.recoverhp({ player: r, number: n.length, source: a, reason: this.name }), await e.puto({ player: r, cards: n, toArea: e.discardArea, animation: !1, source: a, reason: this.name }), await e.obtainCards({ player: r, cards: t.filter((a => 2 !== a.suit && a.area === e.processingArea)), source: a, reason: this.name }) } })), O.addSkill(z), O.addSkill(M); const R = sgs.General({ name: "wars.pangtong", kingdom: "shu", hp: 1.5, gender: 1 }), q = sgs.Skill({ name: "wars.pangtong.lianhuan" }); q.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "PlayPhaseProceeding", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) }, context: (e, a, s) => ({ maxTimes: -1 }), getSelectors: (e, a) => ({ skill_cost: () => { const s = a.from; return { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getHandCards(), filter: (e, a) => 3 === e.suit }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "连环，你可以重铸一张梅花手牌" } } } }), async cost (e, a, s) { const { from: r, cards: t } = s; return await e.recastCards({ player: r, cards: t, source: a, reason: this.name }) } })), q.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedUseCard", can_trigger (e, a, s) { return this.isOwner(a) && s.has("tiesuolianhuan") }, getSelectors: (e, a) => ({ skill_cost: () => { const s = a.from, r = e.createVirtualCardByNone("tiesuolianhuan", void 0, !1); return r.custom.method = 1, { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getHandCards(), filter: (e, a) => 3 === e.suit, onChange (e, a) { "add" === e && r.addSubCard(a), "remove" === e && r.delSubCard(a), r.set(), this._use_or_play_vcard = r } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "连环，你可以将一张梅花手牌当【铁索连环】使用" } } } }), cost: async (e, a, s) => !0 })); const B = sgs.Skill({ name: "wars.pangtong.niepan", tag: [5] }); B.addEffect(sgs.TriggerEffect({ auto_log: 1, forced: "cost", priorityType: 1, trigger: "Dying", can_trigger (e, a, s) { return this.isOwner(a) && s.player === a }, cost: async (e, a, s) => !0, async effect (e, a, s) { const { from: r } = s; await e.dropCards({ player: r, cards: r.getAreaCards(), source: a, reason: this.name }), await e.restore({ player: r, source: a, reason: this.name }), await e.drawCards({ player: r, count: 3, source: a, reason: this.name }), await e.recoverTo({ player: r, number: 3, source: a, reason: this.name }) } })), R.addSkill(q), R.addSkill(B); const H = sgs.General({ name: "wars.weiyan", kingdom: "shu", hp: 2, gender: 1 }), N = sgs.Skill({ name: "wars.weiyan.kuanggu" }); N.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "CauseDamaged", getSelectors (e, a) { return { skill_cost: () => { const s = a.from, r = ["kuanggu_draw", "kuanggu_recover"]; e.createEventData(sgs.DataType.DrawCardsData, { player: s, count: 1, reason: this.name, source: void 0 }).check() || (r[0] = "!" + r[0]); return e.createEventData(sgs.DataType.RecoverHpEvent, { player: s, number: 1, reason: this.name, source: void 0 }).check() || (r[1] = "!" + r[1]), { selectors: { option: e.createChooseOptions({ step: 1, count: 1, selectable: r }) }, options: { canCancle: !0, showMainButtons: !1, prompt: "狂骨，你可以选择一项", thinkPrompt: "狂骨" } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.from === a && s.data.kuanggu }, async cost (e, a, s) { const { from: r } = s, t = s.req_result.results.option.result; return t.includes("kuanggu_draw") ? await e.drawCards({ player: r, source: a, reason: this.name }) : t.includes("kuanggu_recover") ? await e.recoverhp({ player: r, source: a, reason: this.name }) : void 0 }, lifecycle: [{ trigger: "ReduceHpStart", priority: "before", async on_exec (e, a) { if (a.is(sgs.DataType.ReduceHpEvent)) { const e = a.getDamage(); e && e.from === this.player && this.player.distanceTo(e.to) <= 1 && (e.data.kuanggu = !0) } } }] })), H.addSkill(N), sgs.loadTranslation({ kuanggu_draw: "摸一张牌", kuanggu_recover: "回复一点体力" }); const A = sgs.General({ name: "wars.wolong", kingdom: "shu", hp: 1.5, gender: 1 }), I = sgs.Skill({ name: "wars.wolong.bazhen" }), U = sgs.Skill({ name: "wars.wolong.huoji" }); U.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedUseCard", getSelectors: (e, a) => ({ skill_cost: () => { const s = a.from, r = e.createVirtualCardByNone("huogong", void 0, !1); return r.custom.method = 1, { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getHandCards(!0, !0), filter: (e, a) => 1 === e.color, onChange (e, a) { "add" === e && r.addSubCard(a), "remove" === e && r.delSubCard(a), r.set(), this._use_or_play_vcard = r } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "火计，你可以将一张红色手牌当【火攻】使用" } } } }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedUseCardData)) return s.from === a && s.has("huogong") }, cost: async (e, a, s) => !0 })); const V = sgs.Skill({ name: "wars.wolong.kanpo" }); V.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedUseCard", getSelectors: (e, a) => ({ skill_cost: () => { const s = a.from, r = e.createVirtualCardByNone("huogong", void 0, !1); return r.custom.method = 1, { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getHandCards(!0, !0), filter: (e, a) => 2 === e.color, onChange (e, a) { "add" === e && r.addSubCard(a), "remove" === e && r.delSubCard(a), r.set(), this._use_or_play_vcard = r } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "看破，你可以将一张黑色手牌当【无懈可击】使用" } } } }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedUseCardData)) return s.from === a && s.has("wuxiekeji") }, cost: async (e, a, s) => !0 })), A.addSkill(I), A.addSkill(U), A.addSkill(V); const J = sgs.General({ name: "wars.zhangfei", kingdom: "shu", hp: 2, gender: 1 }), $ = sgs.Skill({ name: "wars.zhangfei.paoxiao", tag: [1] }); $.addEffect(sgs.StateEffect({ [w.TargetMod_PassTimeCheck] (e, a, s) { return this.isOwner(e) && "sha" === a.name } })), $.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 0, trigger: "CardBeUse", can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.UseCardEvent)) { const { from: e, card: r } = s; return "sha" === r.name && a === e && a.getMark("__sha_times") >= 2 } } })), $.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "CardBeUse", can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.UseCardEvent) && s.from === a && "sha" === s.card.name) { return 2 === e.getHistorys(sgs.DataType.UseCardEvent, (e => e.from === a && "sha" === e.card.name), e.currentTurn).length } }, async cost (e, a, s) { const { from: r } = s; return await e.drawCards({ player: r, source: a, reason: this.name }) } })), J.addSkill($); const F = sgs.General({ name: "wars.zhaoyun", kingdom: "shu", hp: 2, gender: 1 }), W = sgs.Skill({ name: "wars.zhaoyun.longdan" }); function L (e, a) { const s = a.from, r = e.createVirtualCardByNone("shan", void 0, !1); return r.custom.method = 1, { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getHandCards(!0, !0), filter: (e, a) => "sha" === e.name, onChange (e, a) { "add" === e && r.addSubCard(a), "remove" === e && r.delSubCard(a), r.set(), this._use_or_play_vcard = r } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "龙胆：你可以将一张【杀】当【闪】" } } } function Q (e, a) { const s = a.from, r = e.createVirtualCardByNone("sha", void 0, !1); return r.custom.method = 1, { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getHandCards(!0, !0), filter: (e, a) => "shan" === e.name, onChange (e, a) { "add" === e && r.addSubCard(a), "remove" === e && r.delSubCard(a), r.set(), this._use_or_play_vcard = r } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "武圣：你可以将一张红色牌当【杀】" } } } W.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedUseCard", getSelectors: (e, a) => ({ skill_cost: () => L(e, a) }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedUseCardData)) return s.from === a && s.has("shan") }, cost: async (e, a, s) => !0 })), W.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedPlayCard", getSelectors: (e, a) => ({ skill_cost: () => L(e, a) }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedPlayCardData)) return s.from === a && s.has("shan") }, cost: async (e, a, s) => !0 })), W.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedUseCard", getSelectors: (e, a) => ({ skill_cost: () => Q(e, a) }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedUseCardData)) return s.from === a && s.has("sha") }, cost: async (e, a, s) => !0 })), W.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedPlayCard", getSelectors: (e, a) => ({ skill_cost: () => Q(e, a) }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedPlayCardData)) return s.from === a && s.has("sha") }, cost: async (e, a, s) => !0 })), F.addSkill(W); const K = sgs.General({ name: "wars.zhugeliang", kingdom: "shu", hp: 1.5, gender: 1 }), Z = sgs.Skill({ name: "wars.zhugeliang.kongcheng", tag: [1] }); Z.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "BecomeTarget", can_trigger (e, a, s) { return this.isOwner(a) && !a.hasHandCards() && s.current.target === a && ("sha" === s.card.name || "juedou" === s.card.name) }, cost: async (e, a, s) => (await a.cancleCurrent(), !0) })), Z.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "MoveCardBefore2", can_trigger (e, a, s) { return this.isOwner(a) && !a.hasHandCards() && s.filter(((e, s) => 7 === e.reason && e.toArea === a.handArea)).length > 0 }, async cost (e, a, s) { const { from: r } = s; a.filter(((e, a) => 7 === e.reason && e.toArea === r.handArea)).forEach((e => { e.toArea = r.upArea, e.cards.forEach((e => e.setMark("marks.kongcheng", !0))) })) }, async effect (e, a, s) { const { from: r } = s; r.hasMark("@card:kongcheng") || r.setMark("@card:kongcheng", [r.upArea.areaId, "marks.kongcheng"], { visible: !0 }) } })), Z.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "DrawPhaseStartedAfter", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) && a.hasMark("@card:kongcheng") }, async cost (e, a, s) { const { from: r } = s, t = r.upArea.cards.filter((e => e.hasMark("marks.kongcheng"))); return t.forEach((e => e.removeMark("marks.kongcheng"))), r.removeMark("@card:kongcheng"), await e.obtainCards({ player: r, cards: t, source: a, reason: this.name }) } })); const X = sgs.Skill({ name: "wars.zhugeliang.guanxing" }); X.addEffect(sgs.TriggerEffect({ auto_log: 1, forced: "cost", priorityType: 1, trigger: "ReadyPhaseStarted", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) }, async cost (e, a, s) { const { from: r } = s, t = Math.min(5, e.aliveCount), n = await e.getNCards(t); return await e.puto({ player: r, cards: n, toArea: e.processingArea, animation: !1, puttype: 2, cardVisibles: [r], source: a, reason: this.name }), n }, async effect (e, a, s) { const { from: r } = s, t = s.cost, n = { datas: [] }; n.datas.push({ title: "cards_top", items: [] }), n.datas.push({ title: "cards_bottom", items: [] }), t.forEach((e => { n.datas[0].items.push({ title: "cards_top", card: e.id }), n.datas[1].items.push({ title: "cards_bottom", card: void 0 }) })); const i = (await e.sortCards(r, t, [{ title: "cards_top", max: t.length }, { title: "cards_bottom", max: t.length }], { canCancle: !1, showMainButtons: !1, prompt: this.name, thinkPrompt: this.name })).result.sort_result; await e.moveCards({ move_datas: [{ cards: [...i[0].items, ...i[1].items], toArea: e.drawArea, reason: 1, animation: !1, puttype: 2 }], source: a, reason: this.name }), e.drawArea.remove(i[0].items), e.drawArea.add(i[0].items.reverse(), "top") } })), K.addSkill(Z), K.addSkill(X), sgs.loadTranslation({ cards_top: "牌堆顶", cards_bottom: "牌堆底" }); const Y = sgs.General({ name: "wars.zhurong", kingdom: "shu", hp: 2, gender: 2 }), ee = sgs.Skill({ name: "wars.zhurong.juxiang", tag: [1] }); ee.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "CardEffectStart", can_trigger (e, a, s) { return this.isOwner(a) && "nanmanruqin" === s.card.name && s.current.target === a }, cost: async (e, a, s) => await a.invalidCurrent() })), ee.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "UseCardEnd3", can_trigger (e, a, s) { return this.isOwner(a) && "nanmanruqin" === s.card.name && s.from !== a && s.card.hasSubCards() }, async cost (e, a, s) { const { from: r } = s; return await e.obtainCards({ player: r, cards: a.card.subcards, source: a, reason: this.name }) } })); const ae = sgs.Skill({ name: "wars.zhurong.lieren" }); ae.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, forced: "cost", priorityType: 1, trigger: "CauseDamaged", getSelectors (e, a) { return { choose: () => { const s = a.targets.at(0); return { selectors: { cards: e.createChooseCard({ step: 1, count: 1, selecte_type: "rows", selectable: s.getAreaCards(), data_rows: s.getCardsToArea("he"), windowOptions: { title: "猎刃", timebar: e.responseTime, prompt: "猎刃，请选择一张牌" } }) }, options: { canCancle: !1, showMainButtons: !1, thinkPrompt: this.skill.name } } } } }, can_trigger (e, a, s) { if (this.isOwner(a) && s.from === a && "sha" === s.reason && a.canPindian([s.to])) { const e = s.source; return e.is(sgs.DataType.UseCardEvent) && e.current.target === s.to } }, context: (e, a, s) => ({ targets: [s.to] }), async cost (e, a, s) { const { from: r, targets: t } = s; return await e.pindian({ from: r, targets: t, source: a, reason: this.name, reqOptions: { prompt: "lieren_pindian", thinkPrompt: this.name } }) }, async effect (e, a, s) { const { from: r, targets: [t] } = s; if (s.cost.win === r) { const t = await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } }), n = e.getResultCards(t); await e.obtainCards({ player: r, cards: n, source: a, reason: this.name }) } } })), Y.addSkill(ee), Y.addSkill(ae); const se = sgs.General({ name: "wars.caocao", kingdom: "wei", hp: 2, gender: 1 }), re = sgs.Skill({ name: "wars.caocao.jianxiong" }); re.addEffect(sgs.TriggerEffect({ priorityType: 1, trigger: "InflictDamaged", forced: "cost", auto_log: 1, can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.DamageEvent) && a === s.to && s.channel?.hasSubCards() }, async cost (e, a, s) { const { from: r } = s; return await e.obtainCards({ player: r, cards: a.channel?.subcards, source: a, reason: this.name }) } })), se.addSkill(re); const te = sgs.General({ name: "wars.caopi", kingdom: "wei", hp: 1.5, gender: 1 }), ne = sgs.Skill({ name: "wars.caopi.fangzhu" }); ne.addEffect(sgs.TriggerEffect({ auto_directline: 1, auto_log: 1, priorityType: 1, trigger: "InflictDamaged", getSelectors (e, a) { return { skill_cost: () => ({ selectors: { player: e.createChoosePlayer({ step: 1, count: 1, filter: (e, s) => e !== a.from }) }, options: { canCancle: !0, showMainButtons: !0, prompt: `放逐：你可以选择一名角色，他叠置并摸${a.from.losshp}张牌`, thinkPrompt: this.skill.name } }) } }, can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.DamageEvent) && s.to === a }, async cost (e, a, s) { const { targets: { 0: r } } = s; return await e.skip({ player: r, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r, targets: { 0: t } } = s; await e.drawCards({ player: t, count: r.losshp, source: a, reason: this.name }) } })); const ie = sgs.Skill({ name: "wars.caopi.xingshang" }); ie.addEffect(sgs.TriggerEffect({ auto_directline: 1, auto_log: 1, trigger: "Death", priorityType: 1, forced: "cost", can_trigger (e, a, s) { return this.isOwner(a) && s.player !== a && s.player.hasCardsInArea() }, context: (e, a, s) => ({ targets: [s.player] }), async cost (e, a, s) { const { from: r, targets: [t] } = s; if (t) return await e.obtainCards({ player: r, cards: t.getSelfCards(), source: a, reason: this.name }) } })), te.addSkill(ne), te.addSkill(ie); const oe = sgs.General({ name: "wars.caoren", kingdom: "wei", hp: 2, gender: 1 }), ge = sgs.Skill({ name: "wars.caoren.jushou" }); ge.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "EndPhaseStarted", getSelectors (e, a) { return { choose: () => { const s = a.from; return { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getHandCards(), filter: (a, r) => 3 === a.type ? s.canUseCard(e.createVirtualCardByOne(a, !1).vdata) : s.canDropCard(a) }) }, options: { canCancle: !1, showMainButtons: !0, prompt: "据守：请选择一张装备牌使用或一张非装备牌弃置", thinkPrompt: this.skill.name } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.PhaseEvent) && 6 === s.phase && s.executor === a }, async cost (e, a, s) { const { from: r } = s, t = e.getKingdomCount(); return await e.drawCards({ player: r, count: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r } = s, t = s.cost.count, n = await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } }), i = e.getResultCards(n).at(0); i && (3 === i.type ? await e.preUseCard({ from: r, card: e.createVirtualCardByOne(i), source: a, reason: this.name }) : await e.dropCards({ player: r, cards: [i], source: a, reason: this.name })), t > 2 && await e.skip({ player: r, source: a, reason: this.name }) } })), oe.addSkill(ge); const ce = sgs.General({ name: "wars.dianwei", kingdom: "wei", hp: 2, gender: 1 }), de = sgs.Skill({ name: "wars.dianwei.qiangxi" }); de.addEffect(sgs.TriggerEffect({ auto_directline: 1, auto_log: 1, priorityType: 1, trigger: "PlayPhaseProceeding", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a, 4) }, getSelectors: (e, a) => ({ skill_cost: () => { const s = a.from; return { selectors: { card: e.createDropCards(s, { step: 1, count: [0, 1], selectable: s.getSelfCards(), filter: (e, a) => 31 === e.subtype }), target: e.createChoosePlayer({ step: 2, count: 1, filter (e, a) { return !(0 === this.selectors.card.result.length && s.hp <= 0) && (e !== s && s.rangeOf(e)) } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "强袭，选择一张武器牌弃置（可以不选），再选择一名攻击范围内的角色，对他造成1点伤害" } } } }), async cost (e, a, s) { const { from: r, cards: t } = s; return 0 === t.length ? await e.losehp({ player: r, source: a, reason: this.name }) : await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r, targets: [t] } = s; await e.damage({ from: r, to: t, source: a, reason: this.name }) } })), ce.addSkill(de); const ue = sgs.General({ name: "wars.guojia", kingdom: "wei", hp: 1.5, gender: 1 }), le = sgs.Skill({ name: "wars.guojia.tiandu" }); le.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "JudgeResulted2", forced: "cost", can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.JudgeEvent) && s.player === a && s.card }, async cost (e, a, s) { const { from: r } = s; return await e.obtainCards({ player: r, cards: [a.card], source: a, reason: this.name }) } })); const me = sgs.Skill({ name: "wars.guojia.yiji" }); me.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "InflictDamaged", forced: "cost", getSelectors: (e, a) => ({ choose: () => { const s = a.cards; return { selectors: { card: e.createChooseCard({ step: 1, count: [1, s.length], selectable: s }), player: e.createChoosePlayer({ step: 2, count: 1 }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "遗计：请分配牌（选择任意张牌再选择一名角色），点击取消留给自己" } } } }), can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.DamageEvent) && s.to === a }, async cost (e, a, s) { const { from: r } = s, t = await e.getNCards(2); return s.cards = t, await e.moveCards({ move_datas: [{ cards: t, toArea: e.processingArea, reason: 1, animation: !1, puttype: 2, cardVisibles: [r] }], source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r } = s, t = s.cards.slice(); for (; t.length > 0;) { const n = await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } }); let i = e.getResultCards(n), o = e.getResultPlayers(n).at(0); if (0 === i.length && (i = t.slice()), o || (o = r), await e.giveCards({ from: r, to: o, cards: i, source: a, reason: this.name }), i.length === t.length) break; i.forEach((e => lodash.remove(t, e))), s.cards = t } } })), ue.addSkill(le), ue.addSkill(me); const he = sgs.General({ name: "wars.simayi", kingdom: "wei", hp: 1.5, gender: 1 }), pe = sgs.Skill({ name: "wars.simayi.fankui" }); pe.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "InflictDamaged", auto_directline: 1, forced: "cost", can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.DamageEvent) && a === s.to && s.from && s.from.hasCardsInArea() }, context: (e, a, s) => ({ targets: [s.from] }), getSelectors (e, a) { return { choose: () => { const s = a.targets.at(0); return { selectors: { cards: e.createChooseCard({ step: 1, count: 1, selecte_type: "rows", selectable: s.getAreaCards(), data_rows: s.getCardsToArea("he"), windowOptions: { title: "反馈", timebar: e.responseTime, prompt: "反馈：请选择一张牌" } }) }, options: { canCancle: !1, showMainButtons: !1, thinkPrompt: this.skill.name } } } } }, async cost (e, a, s) { const { from: r, targets: { 0: t } } = s, n = await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } }), i = e.getResultCards(n); return await e.obtainCards({ player: r, cards: i, source: a, reason: this.name }) } })); const fe = sgs.Skill({ name: "wars.simayi.guicai" }); fe.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "JudgeResult1", getSelectors (e, a) { return { skill_cost: () => { const s = a.from, r = this; return { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getSelfCards(), filter: (a, t) => s.canPlayCard(e.createVirtualCardByOne(a, !1).vdata, r.name) }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "鬼才：你可以打出一张牌代替判定牌" } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.JudgeEvent) }, async cost (e, a, s) { const { from: r, cards: t } = s, n = e.createVirtualCardByOne(t.at(0)); return await e.playcard({ from: r, card: n, source: a, reason: this.name, notMoveHandle: !0 }) }, async effect (e, a, s) { const r = s.cost; 0 !== r.card.subcards.length && await a.setCard(r.card.subcards[0]) } })), he.addSkill(pe), he.addSkill(fe); const ye = sgs.General({ name: "wars.xiahoudun", kingdom: "wei", hp: 2.5, gender: 1 }), we = sgs.Skill({ name: "wars.xiahoudun.ganglie" }); we.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "InflictDamaged", auto_directline: 1, forced: "cost", getSelectors (e, a) { return { choose: () => { const s = a.targets.at(0); return { selectors: { card: e.createDropCards(s, { step: 1, count: 2, selectable: s.getHandCards() }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "刚烈，你需要弃置两张手牌，否则受到1点伤害", thinkPrompt: this.name } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.DamageEvent) && a === s.to }, context: (e, a, s) => ({ targets: [s.from] }), async cost (e, a, s) { const { from: r } = s; return await e.judge({ player: r, isSucc: e => 2 !== e.suit, source: a, reason: this.name }) }, async effect (e, a, s) { const r = s.from, t = s.targets.at(0), n = s.cost; if (t && n.success) { const n = await e.doRequest({ player: t, get_selectors: { effectId: this.id, name: "choose", context: s } }), i = e.getResultCards(n); 2 === i.length ? await e.dropCards({ player: t, cards: i, source: a, reason: this.name }) : await e.damage({ from: r, to: t, source: a, reason: this.name }) } } })), ye.addSkill(we); const Ce = sgs.General({ name: "wars.xiahouyuan", kingdom: "wei", hp: 2, gender: 1 }), _e = sgs.Skill({ name: "wars.xiahouyuan.shensu" }); _e.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "JudgePhaseStart", auto_directline: 1, getSelectors (e, a) { return { skill_cost: () => { const s = a.from, r = this, t = e.createVirtualCardByNone("sha", void 0, !1); return t.custom.method = 1, t.custom.skipDistances = !0, t.custom.skipTimes = !0, { selectors: { target: e.createChoosePlayer({ step: 1, count: 1, filter: (e, a) => s.canUseCard(t.vdata, [e], r.name, void 0, a) }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "神速，你可以跳过判定和摸牌阶段，视为使用一张【杀】", thinkPrompt: this.name } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.PhaseEvent) && 2 === s.phase && s.executor === a && !s.isComplete && e.currentTurn.isNotSkip(3) }, cost: async (e, a, s) => (await e.currentTurn.skipPhase([2, 3]), !0), async effect (e, a, s) { const { from: r, targets: t } = s, n = e.createVirtualCardByNone("sha"); n.custom.method = 1, await e.usecard({ from: r, targets: t, card: n, noPlayDirectLine: !0, source: a, reason: this.name }) } })), _e.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "PlayPhaseStart", auto_directline: 1, getSelectors (e, a) { return { skill_cost: () => { const s = a.from, r = this, t = e.createVirtualCardByNone("sha", void 0, !1); return t.custom.method = 1, t.custom.skipDistances = !0, t.custom.skipTimes = !0, { selectors: { card: e.createDropCards(s, { step: 1, count: 1, selectable: s.getSelfCards(), filter: (e, a) => 3 === e.type }), target: e.createChoosePlayer({ step: 2, count: 1, filter: (e, a) => s.canUseCard(t.vdata, [e], r.name, void 0, a) }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "神速，你可以跳过出牌阶段并弃置一张装备牌，视为使用一张【杀】", thinkPrompt: this.name } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.PhaseEvent) && 4 === s.phase && s.executor === a && !s.isComplete }, async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r, targets: t } = s; await e.currentTurn.skipPhase(4); const n = e.createVirtualCardByNone("sha"); n.custom.method = 1, await e.usecard({ from: r, targets: t, card: n, noPlayDirectLine: !0, source: a, reason: this.name }) } })), Ce.addSkill(_e); const ke = sgs.General({ name: "wars.xuchu", kingdom: "wei", hp: 2, gender: 1 }), be = sgs.Skill({ name: "wars.xuchu.luoyi" }); be.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "DrawPhaseProceeding", forced: "cost", can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.PhaseEvent) && 3 === s.phase && s.executor === a && s.ratedDrawnum > 0 }, cost: async (e, a, s) => (a.ratedDrawnum -= 1, !0), async effect (e, a, s) { const { from: r } = s; (await e.addEffect("luoyi.delay", r)).setData("turn", e.currentTurn) } })), ke.addSkill(be); const Ge = sgs.TriggerEffect({ name: "luoyi.delay", priorityType: 1, trigger: "CauseDamage1", can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.DamageEvent) && s.from === a && ("sha" === s.reason || "juedou" === s.reason) }, cost: async (e, a, s) => (a.number++, !0), lifecycle: [{ trigger: "onObtain", async on_exec (e, a) { this.player?.setMark(this.name, !0, { visible: !0 }) } }, { trigger: "onLose", async on_exec (e, a) { this.player?.removeMark(this.name) } }, { trigger: "TurnEnded", async on_exec (e, a) { this.getData("turn") === a && await this.removeSelf() } }] }); sgs.loadTranslation({ [Ge.name]: "裸衣" }); const Te = sgs.General({ name: "wars.xuhuang", kingdom: "wei", hp: 2, gender: 1 }), Se = sgs.Skill({ name: "wars.xuhuang.duanliang" }); Se.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedUseCard", getSelectors: (e, a) => ({ skill_cost: () => { const s = a.from, r = e.createVirtualCardByNone("bingliangcunduan", void 0, !1); return r.custom.method = 1, r.custom.skipDistances = !0, { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getSelfCards(!0, !0), filter: (e, a) => 2 === e.color && (1 === e.type || 3 === e.type), onChange (e, a) { "add" === e && r.addSubCard(a), "remove" === e && r.delSubCard(a), r.set(), this._use_or_play_vcard = r } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "断粮：你可以将一张黑色基本牌或装备牌当【兵粮寸断】使用（无距离限制）" } } } }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedUseCardData)) return s.from === a && !a.hasMark("marks.duanliang") && s.has("bingliangcunduan") }, cost: async (e, a, s) => !0, async effect (e, a, s) { const { from: r } = s; a.targets.some((e => r.distanceTo(e) > 2)) && r.setMark("marks.duanliang", !0, { visible: !0 }) }, lifecycle: [{ trigger: "TurnEnded", async on_exec (e, a) { this.player?.removeMark("marks.duanliang") } }] })), Te.addSkill(Se), sgs.loadTranslation({ "marks.duanliang": "断粮失效" }); const Ee = sgs.General({ name: "wars.xunyu", kingdom: "wei", hp: 1.5, gender: 1 }), Pe = sgs.Skill({ name: "wars.xunyu.jieming" }); Pe.addEffect(sgs.TriggerEffect({ auto_directline: 1, auto_log: 1, priorityType: 1, trigger: "InflictDamaged", getSelectors (e, a) { return { skill_cost: () => ({ selectors: { target: e.createChoosePlayer({ step: 1, count: 1 }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "节命，你可以选择一名角色，令他将手牌补至体力上限", thinkPrompt: this.name } }) } }, can_trigger (e, a, s) { return this.isOwner(a) && s.to === a }, async cost (e, a, s) { const { targets: [r] } = s, t = r.maxhp - r.getHandCards().length; return await e.drawCards({ player: r, count: t, source: a, reason: this.name }) } })); const De = sgs.Skill({ name: "wars.xunyu.quhu" }); De.addEffect(sgs.TriggerEffect({ auto_directline: 1, auto_log: 1, priorityType: 1, trigger: "PlayPhaseProceeding", getSelectors (e, a) { const s = this; return { skill_cost: () => { const r = a.from; return { selectors: { target: e.createChoosePlayer({ step: 1, count: 1, filter: (e, a) => e.hp > r.hp && r.canPindian([e], s.name) }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "驱虎：你可以选择一名体力值大于你的角色，与他发起拼点", thinkPrompt: this.name } } }, choose: () => { const s = a.targets.at(0); return { selectors: { player: e.createChoosePlayer({ step: 1, count: 1, filter: (e, a) => 1 === s.distanceTo(e) }) }, options: { canCancle: !1, showMainButtons: !0, prompt: `驱虎，请选择一名角色，受到${s.gameName}的一点伤害`, thinkPrompt: this.name } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a, 4) && a.canPindian([], this.name) }, async cost (e, a, s) { const { from: r, targets: [t] } = s; return await e.pindian({ from: r, targets: [t], source: a, reason: this.name, reqOptions: { prompt: "quhu_pindian", thinkPrompt: this.name } }) }, async effect (e, a, s) { const { from: r, targets: [t] } = s, n = s.cost; if (n.win === r && e.getPlayerByFilter((e => 1 === t.distanceTo(e))).length > 0) { const t = await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } }), n = e.getResultPlayers(t).at(0); await e.damage({ from: r, to: n, source: a, reason: this.name }) } n.lose.includes(r) && await e.damage({ from: t, to: r, source: a, reason: this.name }) } })), Ee.addSkill(Pe), Ee.addSkill(De), sgs.loadTranslation({ quhu_pindian: "驱虎，请选择一张牌拼点" }); const ve = sgs.General({ name: "wars.yuejin", kingdom: "wei", hp: 2, gender: 1 }), xe = sgs.Skill({ name: "wars.yuejin.xiaoguo" }); xe.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "EndPhaseStarted", can_trigger (e, a, s) { return this.isOwner(a) && !s.isOwner(a, 6) }, getSelectors (e, a) { return { skill_cost: () => { const s = a.from, r = a.targets.at(0); return { selectors: { card: e.createDropCards(s, { step: 1, count: 1, selectable: s.getHandCards(), filter: (e, a) => 1 === e.type }) }, options: { canCancle: !0, showMainButtons: !0, prompt: `骁果，你可以弃置一张基本牌，令${r.gameName}弃置装备牌或受到伤害`, thinkPrompt: this.name } } }, choose: () => { const s = a.targets.at(0); return { selectors: { card: e.createDropCards(s, { step: 1, count: 1, selectable: s.getSelfCards(), filter: (e, a) => 3 === e.type }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "骁果，你需要弃置一张装备牌，否则受到1点伤害", thinkPrompt: this.name } } } } }, context: (e, a, s) => ({ targets: [s.executor] }), async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r, targets: [t] } = s, n = await e.doRequest({ player: t, get_selectors: { effectId: this.id, name: "choose", context: s } }), i = e.getResultCards(n); await e.dropCards({ player: t, cards: i, source: a, reason: this.name }) ? await e.drawCards({ player: r, count: 1, source: a, reason: this.name }) : await e.damage({ from: r, to: t, source: a, reason: this.name }) } })), ve.addSkill(xe); const je = sgs.General({ name: "wars.zhanghe", kingdom: "wei", hp: 2, gender: 1 }), Oe = sgs.Skill({ name: "wars.zhanghe.qiaobian" }); function ze (e, a, s) { const r = a.from; return { selectors: { card: e.createDropCards(r, { step: 1, count: 1, selectable: r.getHandCards() }) }, options: { canCancle: !0, showMainButtons: !0, prompt: s, thinkPrompt: "巧变" } } } Oe.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "JudgePhaseStart", getSelectors: (e, a) => ({ skill_cost: () => ze(e, a, "巧变，你可以弃置一张手牌跳过判定阶段") }), can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.PhaseEvent) && 2 === s.phase && s.executor === a && !s.isComplete }, async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { await e.currentTurn.skipPhase() } })), Oe.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "DrawPhaseStart", getSelectors (e, a) { return { skill_cost: () => ze(e, a, "巧变，你可以弃置一张手牌跳过摸牌阶段，然后获得至多两名其他角色各一张手牌"), choose: () => { const s = a.from; return { selectors: { target: e.createChoosePlayer({ step: 1, count: [1, 2], filter: (e, a) => e !== s && e.hasHandCards() }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "巧变，你可以选择至多两名其他角色，获得他们各一张手牌", thinkPrompt: this.name } } }, choose2: () => { const s = e.getPlayer(a.player); return { selectors: { cards: e.createChooseCard({ step: 1, count: 1, selecte_type: "rows", selectable: s.getAreaCards(), data_rows: s.getCardsToArea("h"), windowOptions: { title: "巧变", timebar: e.responseTime, prompt: "巧变：请选择一张牌" } }) }, options: { canCancle: !1, showMainButtons: !1, thinkPrompt: this.name } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.PhaseEvent) && 3 === s.phase && s.executor === a && !s.isComplete }, async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r } = s; await e.currentTurn.skipPhase(); const t = await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } }), n = e.getResultPlayers(t); for (e.sortResponse(n); n.length > 0;) { const t = n.shift(); s.player = t.playerId; const i = await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose2", context: s } }), o = e.getResultCards(i); await e.obtainCards({ player: r, cards: o, source: a, reason: this.name }) } } })), Oe.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "PlayPhaseStart", getSelectors: (e, a) => ({ skill_cost: () => ze(e, a, "巧变，你可以弃置一张手牌跳过出牌阶段，然后可以移动场上的一张牌") }), can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.PhaseEvent) && 4 === s.phase && s.executor === a && !s.isComplete }, async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r } = s; await e.currentTurn.skipPhase(), await e.moveFiled(r, "ej", { canCancle: !0, showMainButtons: !0, prompt: this.name }, a, this.name) } })), Oe.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "DropPhaseStart", getSelectors: (e, a) => ({ skill_cost: () => ze(e, a, "巧变，你可以弃置一张手牌跳过弃牌阶段") }), can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.PhaseEvent) && 5 === s.phase && s.executor === a && !s.isComplete }, async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { await e.currentTurn.skipPhase() } })), je.addSkill(Oe); const Me = sgs.General({ name: "wars.zhangliao", kingdom: "wei", hp: 2, gender: 1 }), Re = sgs.Skill({ name: "wars.zhangliao.tuxi" }); Re.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "DrawPhaseProceeding", auto_directline: 1, getSelectors (e, a) { return { skill_cost: () => { const s = a.from, r = a.count; return { selectors: { target: e.createChoosePlayer({ step: 1, count: [1, r], filter: (e, a) => e !== s && e.hasHandCards() }) }, options: { canCancle: !0, showMainButtons: !0, prompt: `突袭，你可以选择至多${r}名其他角色，获得他们各一张手牌`, thinkPrompt: this.name } } }, choose: () => { const s = e.getPlayer(a.player); return { selectors: { cards: e.createChooseCard({ step: 1, count: 1, selecte_type: "rows", selectable: s.getAreaCards(), data_rows: s.getCardsToArea("h"), windowOptions: { title: "突袭", timebar: e.responseTime, prompt: "突袭：请选择一张牌" } }) }, options: { canCancle: !1, showMainButtons: !1, thinkPrompt: this.name } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.PhaseEvent) && 3 === s.phase && s.executor === a && s.ratedDrawnum > 0 }, context: (e, a, s) => ({ count: s.ratedDrawnum }), async cost (e, a, s) { const { targets: r } = s; return a.ratedDrawnum -= r.length, r.length > 0 }, async effect (e, a, s) { const { from: r, targets: t } = s; for (; t.length > 0;) { const n = t.shift(); s.player = n.playerId; const i = await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } }), o = e.getResultCards(i); await e.obtainCards({ player: r, cards: o, source: a, reason: this.name }) } } })), Me.addSkill(Re); const qe = sgs.General({ name: "wars.zhenji", kingdom: "wei", hp: 1.5, gender: 2 }), Be = sgs.Skill({ name: "wars.zhenji.qingguo" }); function He (e, a) { const s = a.from, r = e.createVirtualCardByNone("shan", void 0, !1); return r.custom.method = 1, { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getHandCards(!0, !0), filter: (e, a) => 2 === e.color, onChange (e, a) { "add" === e && r.addSubCard(a), "remove" === e && r.delSubCard(a), r.set(), this._use_or_play_vcard = r } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "倾国：你可以将一张黑色手牌当【闪】" } } } Be.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedUseCard", getSelectors: (e, a) => ({ skill_cost: () => He(e, a) }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedUseCardData)) return s.from === a && s.has("shan") }, cost: async (e, a, s) => !0 })), Be.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedPlayCard", getSelectors: (e, a) => ({ skill_cost: () => He(e, a) }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedPlayCardData)) return s.from === a && s.has("shan") }, cost: async (e, a, s) => !0 })); const Ne = sgs.Skill({ name: "wars.zhenji.luoshen" }); Ne.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "ReadyPhaseStarted", forced: "cost", getSelectors (e, a) { return { choose: () => e.createCac({ canCancle: !0, showMainButtons: !0, prompt: "洛神，是否继续判定", thinkPrompt: this.name }) } }, can_trigger (e, a, s) { return this.isOwner(a) && s.is(sgs.DataType.PhaseEvent) && 1 === s.phase && s.executor === a }, async cost (e, a, s) { const { from: r } = s; return await e.judge({ player: r, isSucc: e => 2 === e.color, source: a, reason: this.name, notMoveHandle: e => 2 === e.result.color }) }, async effect (e, a, s) { const { from: r } = s; let t = s.cost; const n = []; for (; ;) { if (t || (t = await e.judge({ player: r, isSucc: e => 2 === e.color, source: a, reason: this.name, notMoveHandle: e => 2 === e.result.color })), !t.success) break; n.push(t.card), t = void 0; if ((await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } })).result.cancle) break } n.length > 0 && await e.obtainCards({ player: r, cards: n, source: a, reason: this.name }) } })), qe.addSkill(Be), qe.addSkill(Ne); const Ae = sgs.General({ name: "wars.daqiao", kingdom: "wu", hp: 1.5, gender: 2 }), Ie = sgs.Skill({ name: "wars.daqiao.guose" }); Ie.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedUseCard", getSelectors: (e, a) => ({ skill_cost: () => { const s = a.from, r = e.createVirtualCardByNone("lebusishu", void 0, !1); return r.custom.method = 1, { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getSelfCards(!0, !0), filter: (e, a) => 4 === e.suit, onChange (e, a) { "add" === e && r.addSubCard(a), "remove" === e && r.delSubCard(a), r.set(), this._use_or_play_vcard = r } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "国色，你可以将一张方片牌当【乐不思蜀】使用" } } } }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedUseCardData)) return s.from === a && s.has("lebusishu") }, cost: async (e, a, s) => !0 })); const Ue = sgs.Skill({ name: "wars.daqiao.liuli" }); Ue.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "BecomeTarget", getSelectors (e, a) { return { skill_cost: () => { const s = a.from, r = a.targets; return { selectors: { card: e.createDropCards(s, { step: 1, count: 1, selectable: s.getSelfCards() }), player: e.createChoosePlayer({ step: 2, count: 1, filter: (e, a) => !r.includes(e) && s.rangeOf(e) }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "流离，你可以弃置一张牌，转移【杀】的目标", thinkPrompt: this.name } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.current.target === a && "sha" === s.card.name }, context: (e, a, s) => ({ targets: [s.from, ...s.targets] }), async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { targets: r } = s; await a.transferCurrent(r.at(0)) } })), Ae.addSkill(Ie), Ae.addSkill(Ue); const Ve = sgs.General({ name: "wars.dingfeng", kingdom: "wu", hp: 2, gender: 1 }), Je = sgs.Skill({ name: "wars.dingfeng.duanbing" }); Je.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "ChooseTarget", can_trigger (e, a, s) { return this.isOwner(a) && "sha" === s.card.name && s.from === a }, context: (e, a, s) => ({ sha: s.card.vdata, targets: s.targets }), getSelectors (e, a) { const s = this; return { skill_cost: () => { const r = a.from, t = a.sha, n = a.targets; return { selectors: { player: e.createChoosePlayer({ step: 1, count: 1, filter: (e, a) => t && !n.includes(e) && 1 === r.distanceTo(e) && r.canUseCard(t, [e], s.name) }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "短兵：你可以选择一名距离1的其他角色也成为【杀】的目标", thinkPrompt: this.name } } } } }, async cost (e, a, s) { const { targets: r } = s; return await a.becomTarget(r) } })); const $e = sgs.Skill({ name: "wars.dignfeng.fenxun" }); $e.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "PlayPhaseProceeding", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) }, getSelectors (e, a) { return { skill_cost: () => { const s = a.from; return { selectors: { card: e.createDropCards(s, { step: 1, count: 1, selectable: s.getSelfCards() }), player: e.createChoosePlayer({ step: 2, count: 1, filter: (e, a) => s !== e }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "奋迅：你可以弃置一张牌再选择一名其他角色，本回合你距离他的距离视为1", thinkPrompt: this.name } } } } }, async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { targets: [r] } = s; r.setMark("marks.fenxun", !0, { visible: !0 }) }, lifecycle: [{ trigger: "TurnEnded", async on_exec (e, a) { a.player === this.player && e.players.forEach((e => { e.removeMark("marks.fenxun") })) } }] })), $e.addEffect(sgs.StateEffect({ [w.Distance_Fixed] (e, a) { if (this.isOwner(e) && a.hasMark("marks.fenxun")) return 1 } })), Ve.addSkill(Je), Ve.addSkill($e), sgs.loadTranslation({ "marks.fenxun": "奋迅" }); const Fe = sgs.General({ name: "wars.ganning", kingdom: "wu", hp: 2, gender: 1 }), We = sgs.Skill({ name: "wars.ganning.qixi" }); We.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedUseCard", getSelectors: (e, a) => ({ skill_cost: () => { const s = a.from, r = e.createVirtualCardByNone("guohechaiqiao", void 0, !1); return r.custom.method = 1, { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getSelfCards(!0, !0), filter: (e, a) => 2 === e.color, onChange (e, a) { "add" === e && r.addSubCard(a), "remove" === e && r.delSubCard(a), r.set(), this._use_or_play_vcard = r } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "奇袭，你可以将一张黑色牌当【过河拆桥】使用" } } } }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedUseCardData)) return s.from === a && s.has("guohechaiqiao") }, cost: async (e, a, s) => !0 })), Fe.addSkill(We); const Le = sgs.General({ name: "wars.huanggai", kingdom: "wu", hp: 2, gender: 1 }), Qe = sgs.Skill({ name: "wars.huanggai.kurou" }); Qe.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "PlayPhaseProceeding", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) }, getSelectors (e, a) { return { skill_cost: () => { const s = a.from; return { selectors: { card: e.createDropCards(s, { step: 1, count: 1, selectable: s.getSelfCards() }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "苦肉，你可以弃置一张牌，然后失去1点体力。摸三张牌，本回合可以多使用一张【杀】", thinkPrompt: this.name } } } } }, async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r } = s; await e.losehp({ player: r, source: a, reason: this.name }), await e.drawCards({ player: r, count: 3, source: a, reason: this.name }); (await e.addEffect("kurou.delay", r)).setData("turn", e.currentTurn) } })); const Ke = sgs.StateEffect({ name: "kurou.delay", [w.TargetMod_CorrectTime] (e, a, s) { if (this.isOwner(e) && "sha" === a.name) return 1 }, lifecycle: [{ trigger: "onObtain", async on_exec (e, a) { this.player?.setMark(this.name, !0, { visible: !0 }) } }, { trigger: "onLose", async on_exec (e, a) { this.player?.removeMark(this.name) } }, { trigger: "TurnEnded", async on_exec (e, a) { this.getData("turn") === a && await this.removeSelf() } }] }); Le.addSkill(Qe), sgs.loadTranslation({ [Ke.name]: "苦肉" }); const Ze = sgs.General({ name: "wars.lusu", kingdom: "wu", hp: 1.5, gender: 1 }), Xe = sgs.Skill({ name: "wars.lusu.haoshi" }); Xe.addEffect(sgs.TriggerEffect({ auto_log: 1, forced: "cost", priorityType: 1, trigger: "DrawPhaseProceeding", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) && s.ratedDrawnum > 0 }, async cost (e, a, s) { const { from: r } = s; a.ratedDrawnum += 2; return (await e.addEffect("haoshi.delay", r)).setData("data", a), !0 } })), sgs.TriggerEffect({ name: "haoshi.delay", auto_log: 1, audio: [], priorityType: 1, trigger: "DrawPhaseEnd", can_trigger (e, a, s) { return this.isOwner(a) && this.getData("data") === s && a.getHandCards().length > 5 }, getSelectors: (e, a) => ({ choose: () => { const s = a.from, r = Math.min(...e.playerAlives.filter((e => e !== s)).map((e => e.getHandCards().length))), t = Math.floor(s.getHandCards().length / 2); return { selectors: { card: e.createChooseCard({ step: 1, count: t, selectable: s.getHandCards() }), player: e.createChoosePlayer({ step: 2, count: 1, filter: (e, a) => e !== s && e.getHandCards().length === r }) }, options: { canCancle: !1, showMainButtons: !0, prompt: `好施，你需要将${t}张手牌交给一名手牌数最少的角色`, thinkPrompt: "好施" } } } }), async cost (e, a, s) { const { from: r } = s, t = await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } }), n = e.getResultCards(t), i = e.getResultPlayers(t).at(0); if (n.length && i) return await e.giveCards({ from: r, to: i, cards: n, source: a, reason: this.name }) }, lifecycle: [{ trigger: "DrawPhaseEnd", priority: "after", async on_exec (e, a) { await this.removeSelf() } }] }); const Ye = sgs.Skill({ name: "wars.lusu.dimeng" }); Ye.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "PlayPhaseProceeding", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) }, getSelectors: (e, a) => ({ skill_cost: () => { const s = a.from; return { selectors: { player: e.createChoosePlayer({ step: 1, count: 2, filter: (e, a) => e !== s, onChange (e, a, s) { if ("add" === e && 2 === s.length) { const e = s[0], a = s[1], r = Math.abs(e.getHandCards().length - a.getHandCards().length); this.selectors.card.count = r, this.options.prompt = `缔盟，你可以选择两名其他角色并弃置${r}张牌，交换他们的手牌` } else this.options.prompt = "缔盟，你可以选择两名其他角色（还未选择），交换他们的手牌" } }), card: e.createDropCards(s, { step: 2, count: 1, selectable: s.getSelfCards() }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "缔盟，你可以选择两名其他角色（还未选择），交换他们的手牌" } } } }), async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r, targets: [t, n] } = s, i = t.getHandCards(), o = n.getHandCards(); await e.swapCards({ player: r, cards1: i, toArea1: n.handArea, cards2: o, toArea2: t.handArea, source: a, reason: this.name }) } })), Ze.addSkill(Xe), Ze.addSkill(Ye); const ea = sgs.General({ name: "wars.luxun", kingdom: "wu", hp: 1.5, gender: 1 }), aa = sgs.Skill({ name: "wars.luxun.qianxun", tag: [1] }); aa.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "BecomeTarget", can_trigger (e, a, s) { return this.isOwner(a) && "shunshouqianyang" === s.card.name && s.current.target === a }, cost: async (e, a, s) => await a.cancleCurrent() })), aa.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "MoveCardBefore2", can_trigger (e, a, s) { return this.isOwner(a) && s.filter(((e, s) => e.toArea === a.judgeArea && "lebusishu" === s.vcard?.name)).length > 0 }, async cost (e, a, s) { const { from: r } = s; return a.filter(((e, a) => e.toArea === r.judgeArea && "lebusishu" === a.vcard?.name))?.forEach((a => a.toArea = e.discardArea)), !0 } })); const sa = sgs.Skill({ name: "wars.luxun.duoshi" }); sa.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "NeedUseCard", getSelectors: (e, a) => ({ skill_cost: () => { const s = a.from, r = e.createVirtualCardByNone("yiyidailao", void 0, !1); return r.custom.method = 1, { selectors: { card: e.createChooseCard({ step: 1, count: 1, selectable: s.getSelfCards(!0, !0), filter: (e, a) => 2 === e.color, onChange (e, a) { "add" === e && r.addSubCard(a), "remove" === e && r.delSubCard(a), r.set(), this._use_or_play_vcard = r } }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "度势，你可以将一张红色手牌当【以逸待劳】使用" } } } }), can_trigger (e, a, s) { if (this.isOwner(a) && s.is(sgs.DataType.NeedUseCardData) && s.from === a && s.has("yiyidailao")) { const s = e.getCurrentPhase(), r = e.getHistorys(sgs.DataType.UseSkillEvent, (e => e.use_skill === this), s); return s.isOwner(a, 4) && r.length < 4 } }, cost: async (e, a, s) => !0 })), ea.addSkill(aa), ea.addSkill(sa); const ra = sgs.General({ name: "wars.lvmeng", kingdom: "wu", hp: 2, gender: 1 }), ta = sgs.Skill({ name: "wars.lvmeng.keji", tag: [1] }); ta.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "DropPhaseProceeding", can_trigger (e, a, s) { if (this.isOwner(a) && this.isOpen() && s.isOwner(a)) { const s = []; return e.getHistorys(sgs.DataType.PhaseEvent, (e => e.isOwner(a, 4)), e.currentTurn).forEach((r => { s.push(...e.getHistorys(sgs.DataType.UseCardEvent, (e => e.from === a), r)), s.push(...e.getHistorys(sgs.DataType.UseCardToCardEvent, (e => e.from === a), r)) })), !s.find((e => s.find((a => 0 !== e.card.color && 0 !== a.card.color && e.card.color !== a.card.color)))) } }, async cost (e, a, s) { return s.from.setMark(this.name, !0), !0 }, lifecycle: [{ trigger: "DropPhaseEnd", priority: "after", async on_exec (e, a) { this.player.removeMark(this.name) } }] })), ta.addEffect(sgs.StateEffect({ [w.MaxHand_Correct] (e) { if (this.isOwner(e) && e.hasMark(this.name)) return 4 } })); const na = sgs.Skill({ name: "wars.lvmeng.mouduan" }); na.addEffect(sgs.TriggerEffect({ auto_log: 1, forced: "cost", priorityType: 1, trigger: "EndPhaseStarted", can_trigger (e, a, s) { if (this.isOwner(a) && s.isOwner(a)) { const s = []; if (e.getHistorys(sgs.DataType.PhaseEvent, (e => e.isOwner(a, 4)), e.currentTurn).forEach((r => { s.push(...e.getHistorys(sgs.DataType.UseCardEvent, (e => e.from === a), r)), s.push(...e.getHistorys(sgs.DataType.UseCardToCardEvent, (e => e.from === a), r)) })), s.length < 3) return !1; const r = [], t = []; return s.forEach((e => { r.includes(e.card.suit) || 0 === e.card.suit || r.push(e.card.suit), t.includes(e.card.type) || 0 === e.card.type || t.push(e.card.type) })), 4 === r.length || 3 === t.length } }, async cost (e, a, s) { const { from: r } = s; await e.moveFiled(r, "ej", { canCancle: !0, showMainButtons: !0, prompt: this.name }, a, this.name) } })), ra.addSkill(ta), ra.addSkill(na); const ia = sgs.General({ name: "wars.sunjian", kingdom: "wu", hp: 2.5, gender: 1 }), oa = sgs.Skill({ name: "wars.sunjian.yinghun" }); oa.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "ReadyPhaseStarted", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) && a.losshp > 0 }, getSelectors (e, a) { return { skill_cost: () => { const s = a.from, r = []; return s.losshp > 1 && (r.push({ text: "yinghun.draw", values: [{ type: "number", value: s.losshp }] }), r.push({ text: "yinghun.drop", values: [{ type: "number", value: s.losshp }] })), { selectors: { player: e.createChoosePlayer({ step: 1, count: 1, filter: (e, a) => e !== s }), option: e.createChooseOptions({ step: 2, count: 1, selectable: r }) }, options: { canCancle: !0, showMainButtons: !1, prompt: s.losshp > 1 ? "英魂，请选择一名其他角色并选择一个选项令其执行" : "英魂，请选择一名其他角色让他摸一张牌，再弃置一张牌", thinkPrompt: this.name } } }, choose: () => { const s = a.targets.at(0), r = a.count; return { selectors: { card: e.createDropCards(s, { step: 1, count: r, selectable: s.getSelfCards() }) }, options: { canCancle: !1, showMainButtons: !0, prompt: `英魂，你需要弃置${r}张牌`, thinkPrompt: this.name } } } } }, async cost (e, a, s) { const { from: r, targets: [t], req_result: n } = s; let i = n.results.option?.result; const o = i.includes("yinghun.draw") ? r.losshp : 1, g = i.includes("yinghun.drop") ? r.losshp : 1; return s.count = g, await e.drawCards({ player: t, count: o, source: a, reason: this.name }) }, async effect (e, a, s) { const { targets: [r] } = s, t = await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } }), n = e.getResultCards(t); await e.dropCards({ player: r, cards: n, source: a, reason: this.name }) } })), ia.addSkill(oa), sgs.loadTranslation({ "yinghun.draw": "摸{0}弃1", "yinghun.drop": "摸1弃{0}" }); const ga = sgs.General({ name: "wars.sunquan", kingdom: "wu", hp: 2, gender: 1 }), ca = sgs.Skill({ name: "wars.sunquan.zhiheng" }); ca.addEffect(sgs.TriggerEffect({ auto_log: 1, priorityType: 1, trigger: "PlayPhaseProceeding", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) }, getSelectors (e, a) { return { skill_cost: () => { const s = a.from; return { selectors: { card: e.createDropCards(s, { step: 1, count: [1, s.maxhp], selectable: s.getSelfCards() }) }, options: { canCancle: !0, showMainButtons: !0, prompt: `制衡，你可以弃置至多${s.maxhp}张牌，然后摸等量的牌`, thinkPrompt: this.name } } } } }, async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r, cards: t } = s; await e.drawCards({ player: r, count: t.length, source: a, reason: this.name }) } })), ga.addSkill(ca); const da = sgs.General({ name: "wars.sunshangxiang", kingdom: "wu", hp: 1.5, gender: 2 }), ua = sgs.Skill({ name: "wars.sunshangxiang.jieyin" }); ua.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "PlayPhaseProceeding", can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a) }, getSelectors (e, a) { return { skill_cost: () => { const s = a.from; return { selectors: { card: e.createDropCards(s, { step: 1, count: 2, selectable: s.getHandCards() }), player: e.createChoosePlayer({ step: 2, count: 1, filter: (e, a) => e !== s && 1 === e.gender && e.losshp > 0 }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "结姻，你可以弃置两张手牌并选择一名其他男性角色，你和他各回复1点体力", thinkPrompt: this.name } } } } }, async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r, targets: [t] } = s; await e.recoverhp({ player: r, source: a, reason: this.name }), await e.recoverhp({ player: t, source: a, reason: this.name }) } })); const la = sgs.Skill({ name: "wars.sunshangxiang.xiaoji" }); la.addEffect(sgs.TriggerEffect({ auto_log: 1, forced: "cost", priorityType: 1, trigger: "MoveCardAfter2", can_trigger (e, a, s) { return this.isOwner(a) && s.filter(((e, s) => e.fromArea === a.equipArea)).length > 0 }, async cost (e, a, s) { const { from: r } = s; return await e.drawCards({ player: r, count: 2, source: a, reason: this.name }) } })), da.addSkill(ua), da.addSkill(la); const ma = sgs.General({ name: "wars.taishici", kingdom: "wu", hp: 2, gender: 1 }), ha = sgs.Skill({ name: "wars.taishici.tianyi" }); ha.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "PlayPhaseProceeding", getSelectors (e, a) { const s = this; return { skill_cost: () => { const r = a.from; return { selectors: { target: e.createChoosePlayer({ step: 1, count: 1, filter: (e, a) => r.canPindian([e], s.name) }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "天义：你可以与一名其他角色拼点", thinkPrompt: this.name } } } } }, can_trigger (e, a, s) { return this.isOwner(a) && s.isOwner(a, 4) && a.canPindian([], this.name) }, async cost (e, a, s) { const { from: r, targets: [t] } = s; return await e.pindian({ from: r, targets: [t], source: a, reason: this.name, reqOptions: { prompt: "tianyi_pindian", thinkPrompt: this.name } }) }, async effect (e, a, s) { const { from: r } = s, t = s.cost; if (t.win === r) { const a = await e.addEffect("tianyi.states", r), s = await e.addEffect("tianyi.target", r); a.setData("turn", e.currentTurn), s.setData("turn", e.currentTurn) } if (t.lose.includes(r)) { (await e.addEffect("tianyi.cantuse", r)).setData("turn", e.currentTurn) } } })), sgs.StateEffect({ name: "tianyi.states", [w.TargetMod_CorrectTime]: (e, a, s) => 1, [w.TargetMod_PassDistanceCheck] (e, a, s) { return this.isOwner(this.player) && "sha" === a.name }, lifecycle: [{ trigger: "onObtain", async on_exec (e, a) { this.player?.hasMark("marks.tianyi.win") || this.player?.setMark("marks.tianyi.win", !0, { visible: !0 }) } }, { trigger: "onLose", async on_exec (e, a) { this.player?.removeMark("marks.tianyi.win") } }, { trigger: "TurnEnded", priority: "after", async on_exec (e, a) { await this.removeSelf() } }] }), sgs.TriggerEffect({ name: "tianyi.targets", auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "ChooseTarget", can_trigger (e, a, s) { return this.isOwner(a) && "sha" === s.card.name && s.from === a }, context: (e, a, s) => ({ sha: s.card.vdata, targets: s.targets }), getSelectors (e, a) { const s = this; return { skill_cost: () => { const r = a.from, t = a.sha, n = a.targets; return { selectors: { player: e.createChoosePlayer({ step: 1, count: 1, filter: (e, a) => t && !n.includes(e) && r.canUseCard(t, [e], s.name) }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "天义：你可以选择一名其他角色也成为【杀】的目标", thinkPrompt: this.name } } } } }, async cost (e, a, s) { const { targets: r } = s; return await a.becomTarget(r) }, lifecycle: [{ trigger: "onObtain", async on_exec (e, a) { this.player?.hasMark("marks.tianyi.win") || this.player?.setMark("marks.tianyi.win", !0, { visible: !0 }) } }, { trigger: "onLose", async on_exec (e, a) { this.player?.removeMark("marks.tianyi.win") } }, { trigger: "TurnEnded", priority: "after", async on_exec (e, a) { await this.removeSelf() } }] }), sgs.StateEffect({ name: "tianyi.cantuse", [w.Prohibit_UseCard] (e, a, s, r) { return this.isOwner(this.player) && "sha" === a.name }, lifecycle: [{ trigger: "onObtain", async on_exec (e, a) { this.player?.setMark("marks.tianyi.lose", !0, { visible: !0 }) } }, { trigger: "onLose", async on_exec (e, a) { this.player?.removeMark("marks.tianyi.lose") } }, { trigger: "TurnEnded", priority: "after", async on_exec (e, a) { await this.removeSelf() } }] }), ma.addSkill(ha), sgs.loadTranslation({ quhu_pindian: "天义，请选择一张牌拼点", "marks.tianyi.win": "天义[赢]", "marks.tianyi.lose": "天义[没赢]" }); const pa = sgs.General({ name: "wars.xiaoqiao", kingdom: "wu", hp: 1.5, gender: 2 }), fa = sgs.Skill({ name: "wars.xiaoqiao.tianxiang" }); fa.addEffect(sgs.TriggerEffect({ auto_log: 1, auto_directline: 1, priorityType: 1, trigger: "InflictDamage3", can_trigger (e, a, s) { return this.isOwner(a) && a === s.to }, getSelectors (e, a) { return { skill_cost: () => { const s = a.from; return { selectors: { card: e.createDropCards(s, { step: 1, count: 1, selectable: s.getHandCards(), filter: (e, a) => 2 === e.suit }), player: e.createChoosePlayer({ step: 2, count: 1, filter: (e, a) => e !== s }) }, options: { canCancle: !0, showMainButtons: !0, prompt: "天香，你可以弃置一张红桃牌让一名角色受到伤害或失去体力", thinkPrompt: this.name } } }, choose: () => ({ selectors: { option: e.createChooseOptions({ step: 1, count: 1, selectable: ["tianxiang.damage", "tianxiang.losehp"] }) }, options: { canCancle: !1, showMainButtons: !1, prompt: "天香，请选择一项", thinkPrompt: this.name } }) } }, async cost (e, a, s) { const { from: r, cards: t } = s; return await e.dropCards({ player: r, cards: t, source: a, reason: this.name }) }, async effect (e, a, s) { const { from: r, targets: [t], cards: n } = s; await a.prevent(); const i = await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } }), o = e.getResult(i, "option").result; if (o.includes("tianxiang.damage")) { await e.damage({ from: a.from, to: t, source: a, reason: this.name }) && await e.drawCards({ player: t, count: Math.min(5, t.losshp), source: a, reason: this.name }) } if (o.includes("tianxiang.losehp")) { const s = await e.losehp({ player: t, source: a, reason: this.name }), r = n.at(0); !s || r.area !== e.drawArea && r.area !== e.discardArea || await e.obtainCards({ player: t, cards: [r], source: a, reason: this.name }) } } })); const ya = sgs.Skill({ name: "wars.xiaoqiao.hongyan", tag: [1] }); ya.addEffect(sgs.StateEffect({})), pa.addSkill(fa), pa.addSkill(ya), sgs.loadTranslation({ "tianxiang.damage": "受到伤害", "tianxiang.losehp": "失去体力" }); const wa = sgs.Package("GuozhanDefaultGenerals"); wa.addGenerals([c, d]); const Ca = sgs.Package("GuozhanStandardGenerals"); Ca.addGenerals([se, he, ye, Me, ke, ue, qe, Ce, je, Te, oe, ce, Ee, te, ve]), Ca.addGenerals([T, h, J, K, F, v, C, b, H, R, A, E, O, Y, u]), Ca.addGenerals([ga, Fe, ra, Le, Ae, ea, da, ia, pa, ma, Ze, Ve]), sgs.loadTranslation({ GuozhanDefaultGenerals: "国战标准", GuozhanStandardGenerals: "国战标准" }); const _a = sgs.General({ name: "wars.lord_caocao", kingdom: "wei", hp: 2, gender: 1, lord: !0 }), ka = sgs.General({ name: "wars.lord_liubei", kingdom: "shu", hp: 2, gender: 1, lord: !0 }), ba = sgs.General({ name: "wars.lord_sunquan", kingdom: "wu", hp: 2, gender: 1, lord: !0 }), Ga = sgs.General({ name: "wars.lord_zhangjiao", kingdom: "qun", hp: 2, gender: 1, lord: !0 }), Ta = sgs.General({ name: "wars.bianfuren", kingdom: "wei", hp: 1.5, gender: 2 }), Sa = sgs.General({ name: "wars.caohong", kingdom: "wei", hp: 2, gender: 1 }), Ea = sgs.General({ name: "wars.chenwudongxi", kingdom: "wu", hp: 2, gender: 1 }), Pa = sgs.General({ name: "wars.cuiyanmaojie", kingdom: "wei", hp: 1.5, gender: 1 }), Da = sgs.General({ name: "wars.dengai", kingdom: "wei", hp: 2, gender: 1 }), va = sgs.General({ name: "wars.dongzhuo", kingdom: "qun", hp: 2, gender: 1 }), xa = sgs.General({ name: "wars.fazheng", kingdom: "shu", hp: 1.5, gender: 1 }), ja = sgs.General({ name: "wars.hetaihou", kingdom: "qun", hp: 1.5, gender: 2 }), Oa = sgs.General({ name: "wars.jiangqin", kingdom: "wu", hp: 2, gender: 1 }), za = sgs.General({ name: "wars.jiangwanfeiyi", kingdom: "shu", hp: 1.5, gender: 1 }), Ma = sgs.General({ name: "wars.jiangwei", kingdom: "shu", hp: 2, gender: 1 }), Ra = sgs.General({ name: "wars.lidian", kingdom: "wei", hp: 1.5, gender: 1 }), qa = sgs.General({ name: "wars.lijueguosi", kingdom: "qun", hp: 2, gender: 1 }), Ba = sgs.General({ name: "wars.lingtong", kingdom: "wu", hp: 2, gender: 1 }), Ha = sgs.General({ name: "wars.lukang", kingdom: "wu", hp: 1.5, gender: 1 }), Na = sgs.General({ name: "wars.lvfan", kingdom: "wu", hp: 1.5, gender: 1 }), Aa = sgs.General({ name: "wars.madai", kingdom: "shu", hp: 2, gender: 1 }), Ia = sgs.General({ name: "wars.masu", kingdom: "shu", hp: 1.5, gender: 1 }), Ua = sgs.General({ name: "wars.mifuren", kingdom: "shu", hp: 1.5, gender: 2 }), Va = sgs.General({ name: "wars.shamoke", kingdom: "shu", hp: 2, gender: 1 }), Ja = sgs.General({ name: "wars.sunce", kingdom: "wu", hp: 2, gender: 1 }), $a = sgs.General({ name: "wars.wangping", kingdom: "shu", hp: 2, gender: 1 }), Fa = sgs.General({ name: "wars.wuguotai", kingdom: "wu", hp: 1.5, gender: 2 }), Wa = sgs.General({ name: "wars.xunyou", kingdom: "wei", hp: 1.5, gender: 1 }), La = sgs.General({ name: "wars.xusheng", kingdom: "wu", hp: 2, gender: 1 }), Qa = sgs.General({ name: "wars.yuanshu", kingdom: "qun", hp: 2, gender: 1 }), Ka = sgs.General({ name: "wars.yuji", kingdom: "qun", hp: 1.5, gender: 1 }), Za = sgs.General({ name: "wars.zangba", kingdom: "wei", hp: 2, gender: 1 }), Xa = sgs.General({ name: "wars.zhangren", kingdom: "qun", hp: 2, gender: 1 }), Ya = sgs.General({ name: "wars.zhangxiu", kingdom: "qun", hp: 2, gender: 1 }), es = sgs.General({ name: "wars.zuoci", kingdom: "qun", hp: 1.5, gender: 1 }), as = sgs.Package("GuozhanPowerZhenGenerals"), ss = sgs.Package("GuozhanPowerShiGenerals"), rs = sgs.Package("GuozhanPowerBianGenerals"), ts = sgs.Package("GuozhanPowerQuanGenerals"); as.addGenerals([Da, Sa, Ma, za, Oa, La, Ka, ja, ka]), ss.addGenerals([Ra, Za, Aa, Ua, Ja, Ea, va, Xa, Ga]), rs.addGenerals([Wa, Ta, Va, Ia, Ba, Na, qa, es, ba]), ts.addGenerals([Pa, Ka, $a, xa, Fa, Ha, Ya, Qa, _a]), sgs.loadTranslation({ GuozhanPowerZhenGenerals: "君临天下·阵", GuozhanPowerShiGenerals: "君临天下·势", GuozhanPowerBianGenerals: "君临天下·变", GuozhanPowerQuanGenerals: "君临天下·权" }); const ns = sgs.General({ name: "wars.baifuren", kingdom: "jin", hp: 1.5, gender: 2 }), is = sgs.General({ name: "wars.duyu", kingdom: "jin", hp: 2, gender: 1 }), os = sgs.General({ name: "wars.guohuai_jin", kingdom: "jin", hp: 1.5, gender: 2 }), gs = sgs.General({ name: "wars.jiachong", kingdom: "jin", hp: 1.5, gender: 1 }), cs = sgs.General({ name: "wars.malong", kingdom: "jin", hp: 2, gender: 1 }), ds = sgs.General({ name: "wars.shibao", kingdom: "jin", hp: 2, gender: 1 }), us = sgs.General({ name: "wars.simaliang", kingdom: "jin", hp: 2, gender: 1 }), ls = sgs.General({ name: "wars.simalun", kingdom: "jin", hp: 2, gender: 1 }), ms = sgs.General({ name: "wars.simashi", kingdom: "jin", hp: 2, gender: 1 }), hs = sgs.General({ name: "wars.simayi_jin", kingdom: "jin", hp: 2, gender: 1 }), ps = sgs.General({ name: "wars.simazhao", kingdom: "jin", hp: 1.5, gender: 1 }), fs = sgs.General({ name: "wars.simazhou", kingdom: "jin", hp: 2, gender: 1 }), ys = sgs.General({ name: "wars.sunxiu_jin", kingdom: "jin", hp: 1.5, gender: 1 }), ws = sgs.General({ name: "wars.wangjun", kingdom: "jin", hp: 2, gender: 1 }), Cs = sgs.General({ name: "wars.wangxiang", kingdom: "jin", hp: 1.5, gender: 1 }), _s = sgs.General({ name: "wars.wangyuanji", kingdom: "jin", hp: 1.5, gender: 2 }), ks = sgs.General({ name: "wars.weiguan", kingdom: "jin", hp: 1.5, gender: 1 }), bs = sgs.General({ name: "wars.wenyang", kingdom: "jin", hp: 2.5, gender: 1 }), Gs = sgs.General({ name: "wars.yanghu", kingdom: "jin", hp: 2, gender: 1 }), Ts = sgs.General({ name: "wars.yanghuiyu", kingdom: "jin", hp: 1.5, gender: 2 }), Ss = sgs.General({ name: "wars.yangjun", kingdom: "jin", hp: 2, gender: 1 }), Es = sgs.General({ name: "wars.zhangchunhua_jin", kingdom: "jin", hp: 1.5, gender: 1 }), Ps = sgs.General({ name: "wars.zhanghuyuechen", kingdom: "jin", hp: 2, gender: 1 }), Ds = sgs.General({ name: "wars.lord_simayi", kingdom: "jin", hp: 2, gender: 1, lord: !0 }), vs = sgs.Package("GuozhanJinGenerals"), xs = sgs.Package("GuozhanPowerJinGenerals"); vs.addGenerals([hs, Es, ms, ps, fs, us, ls, ds, Ts, _s, ks, gs, os, ws, cs]), xs.addGenerals([is, Gs, Ps, bs, Cs, ns, Ss, ys, Ds]), sgs.loadTranslation({ GuozhanJinGenerals: "国战标准·晋", GuozhanPowerJinGenerals: "君临天下·晋" }); const js = sgs.TriggerEffect({ name: "yiyidailao_choose", getSelectors (e, a) { const s = a.from; return { choose: () => ({ selectors: { cards: e.createDropCards(s, { step: 1, count: 2, selectable: s.getSelfCards() }) }, options: { canCancle: !1, showMainButtons: !0, prompt: "以逸待劳，你需要弃置两张牌", thinkPrompt: "以逸待劳" } }) } } }), Os = sgs.CardUse({ name: "yiyidailao", method: 1, trigger: "PlayPhaseProceeding", effects: [js.name], target: (e, a, s) => e.createChoosePlayer({ count: [1, -1], filter: (s, r) => e.sameAsKingdom(a, s), auto: !0 }), async effect (e, a, s) { const { current: r } = s; await e.drawCards({ player: r.target, count: 2, source: s, reason: this.name }); const t = e.getData("yiyidailao_choose"), n = await e.doRequest({ player: r.target, get_selectors: { effectId: t.id, name: "choose", context: { from: r.target } } }), i = e.getResult(n, "cards").result; await e.dropCards({ player: r.target, cards: i, source: s, reason: this.name }) } }); sgs.setCardData("yiyidailao", { type: 2, subtype: 21, length: 4, rhyme: "ao" }), sgs.loadTranslation({ yiyidailao: "以逸待劳", "@desc:yiyidailao": "锦囊牌·普通锦囊牌\n\n使用时机：出牌阶段。\n使用目标：与你势力相同的所有角色。\n作用效果：目标对应的角色摸两张牌，弃置两张牌。", "@yiyidailao": "所有与你势力相同的人依次摸两张牌，弃两张牌" }); const zs = sgs.CardUse({ name: "yuanjiaojingong", method: 1, trigger: "PlayPhaseProceeding", target: (e, a, s) => e.createChoosePlayer({ count: 1, filter: (s, r) => e.differentAsKingdom(a, s) }), async effect (e, a, s) { const { from: r, current: t } = s; await e.drawCards({ player: t.target, count: 1, source: s, reason: this.name }), await e.drawCards({ player: r, count: 3, source: s, reason: this.name }) } }); sgs.setCardData("yuanjiaojingong", { type: 2, subtype: 21, length: 4, rhyme: "ong" }), sgs.loadTranslation({ yuanjiaojingong: "远交近攻", "@desc:yuanjiaojingong": "锦囊牌·普通锦囊牌\n\n使用时机：出牌阶段。\n使用目标：与你势力不同的一名角色。\n作用效果：目标对应的角色摸一张牌。你摸三张牌。", "@yuanjiaojingong": "选择一名角色，他摸一张牌，你摸三张牌" }); const Ms = sgs.TriggerEffect({ name: "zhijizhibi_choose", getSelectors: (e, a) => ({ choose: () => ({ selectors: { option: e.createChooseOptions({ step: 1, count: 1, selectable: a.handles }) }, options: { canCancle: !1, prompt: "chooseone_zhijizhibi", showMainButtons: !1 } }) }) }), Rs = sgs.CardUse({ name: "zhijizhibi", method: 1, trigger: "PlayPhaseProceeding", effects: [Ms.name], target: (e, a, s) => e.createChoosePlayer({ count: 1, filter: (e, s) => a !== e && (e.hasHandCards() || e.hasNoneOpen()) }), async effect (e, a, s) { const { from: r, current: t } = s, n = e.createEventData(sgs.DataType.WatchGeneralData, { watcher: r, player: t.target, generals: [t.target.head], source: s, reason: this.name }), i = e.createEventData(sgs.DataType.WatchGeneralData, { watcher: r, player: t.target, generals: [t.target.deputy], source: s, reason: this.name }), o = e.createEventData(sgs.DataType.WatchHandData, { watcher: r, player: t.target, source: s, reason: this.name }), g = []; g.push((o.check() ? "" : "!") + "watchHand"), g.push((n.check() ? "" : "!") + "watchHead"), g.push((i.check() ? "" : "!") + "watchDeputy"); const c = e.getData("zhijizhibi_choose"), d = await e.doRequest({ player: t.target, get_selectors: { effectId: c.id, name: "choose", context: { handles: g } } }), u = e.getResult(d, "option").result; u.includes("watchHand") && await e.watchHandCard(o), u.includes("watchHead") && await e.watchGeneral(n), u.includes("watchDeputy") && await e.watchGeneral(i) } }); sgs.setCardData("zhijizhibi", { type: 2, subtype: 21, length: 4, rhyme: "i" }), sgs.loadTranslation({ zhijizhibi: "知己知彼", "@desc:zhijizhibi": "锦囊牌·普通锦囊牌\n\n使用时机：出牌阶段。\n使用目标：一名有手牌或暗置的武将牌的其他角色。\n作用效果：你选择：1.观看目标对应的角色的手牌；2.观看目标对应的角色的一张暗置的武将牌。", "@zhijizhibi": "选择一名角色，观看他一张暗置的武将牌或手牌", "@chooseone_zhijizhibi": "知己知彼：请选择一项", "@@chooseone_zhijizhibi": "知己知彼", watchHand: "观看手牌", watchHead: "观看主将", watchDeputy: "观看副将" }), sgs.setRelationship("wars.caocao", "wars.xuchu"), sgs.setRelationship("wars.caocao", "wars.dianwei"), sgs.setRelationship("wars.caocao", "wars.bianfuren"), sgs.setRelationship("wars.caopi", "wars.zhenji"), sgs.setRelationship("wars.caopi", "wars.cuiyanmaojie"), sgs.setRelationship("wars.caoren", "wars.caohong"), sgs.setRelationship("wars.xiahoudun", "wars.xiahouyuan"), sgs.setRelationship("wars.xiahoudun", "wars.yujin"), sgs.setRelationship("wars.lidian", "wars.yuejin"), sgs.setRelationship("wars.zhangliao", "wars.zangba"), sgs.setRelationship("wars.xunyu", "wars.xunyou"), sgs.setRelationship("wars.liubei", "wars.guanyu"), sgs.setRelationship("wars.liubei", "wars.zhangfei"), sgs.setRelationship("wars.liubei", "wars.ganfuren"), sgs.setRelationship("wars.liubei", "wars.fazheng"), sgs.setRelationship("wars.zhangfei", "wars.guanyu"), sgs.setRelationship("wars.zhugeliang", "wars.huangyueying"), sgs.setRelationship("wars.zhugeliang", "wars.jiangwei"), sgs.setRelationship("wars.zhugeliang", "wars.jiangwanfeiyi"), sgs.setRelationship("wars.wolong", "wars.huangyueying"), sgs.setRelationship("wars.wolong", "wars.pangtong"), sgs.setRelationship("wars.zhaoyun", "wars.liushan"), sgs.setRelationship("wars.machao", "wars.madai"), sgs.setRelationship("wars.huangzhong", "wars.weiyan"), sgs.setRelationship("wars.menghuo", "wars.zhurong"), sgs.setRelationship("wars.jiangwanfeiyi", "wars.wangping"), sgs.setRelationship("wars.sunquan", "wars.zhoutai"), sgs.setRelationship("wars.jiangqin", "wars.zhoutai"), sgs.setRelationship("wars.ganning", "wars.lingtong"), sgs.setRelationship("wars.luxun", "wars.lukang"), sgs.setRelationship("wars.zhouyu", "wars.huanggai"), sgs.setRelationship("wars.zhouyu", "wars.xiaoqiao"), sgs.setRelationship("wars.zhouyu", "wars.sunce"), sgs.setRelationship("wars.daqiao", "wars.xiaoqiao"), sgs.setRelationship("wars.daqiao", "wars.sunce"), sgs.setRelationship("wars.sunce", "wars.taishici"), sgs.setRelationship("wars.sunjian", "wars.wuguotai"), sgs.setRelationship("wars.xusheng", "wars.dingfeng"), sgs.setRelationship("wars.lvbu", "wars.diaochan"), sgs.setRelationship("wars.yuanshao", "wars.yanliangwenchou"), sgs.setRelationship("wars.yuji", "wars.zuoci"), sgs.setRelationship("wars.jiaxu", "wars.lijueguosi"), sgs.setRelationship("wars.jiaxu", "wars.zhangxiu"), sgs.setRelationship("wars.jiling", "wars.yuanshu"), sgs.setRelationship("wars.zuoci", "wars.yuji"), sgs.setRelationship("wars.simayi_jin", "wars.zhangchunhua_jin"), sgs.setRelationship("wars.simashi", "wars.yanghuiyu"), sgs.setRelationship("wars.simazhao", "wars.wangyuanji"), sgs.setRelationship("wars.jiachong", "wars.guohuai_jin"), sgs.setRelationship("wars.yanghu", "wars.duyu"), sgs.setRelationship("wars.baifuren", "wars.simayi_jin"), sgs.setRelationship("wars.sunxiu_jin", "wars.simalun"); const qs = sgs.Skill({ name: "game_wars_rules" }); qs.addEffect("base_selectors"), qs.addEffect("gamerule_obtain_skill"), qs.addEffect("gamerule_init_handcard"), qs.addEffect("gamerule_judgephase"), qs.addEffect("gamerule_drawphase"), qs.addEffect("gamerule_dropphase"), qs.addEffect(sgs.TriggerEffect({ trigger: "ChooseGeneralAfter", priorityType: 5, can_trigger: () => !0, async cost (e, a) { for (const a of e.playerAlives) await e.addSkill("wars.hezong", a, { source: "system", showui: "other" }); return !0 } })), qs.addEffect(sgs.TriggerEffect({ priorityType: 5, trigger: "ChooseGeneral", can_trigger: () => !0, getSelectors: (e, a) => ({ choose_general: () => ({ selectors: { general: { type: "general", step: 1, count: 2, selectable: e.getGenerals(a.generals), filter: function (e, a) { return 0 === a.length ? !e.isDual() && !!this.selectors.general.selectable.find((a => a !== e && e.sameAs(a))) : 1 === a.length && ("ye" !== e.kingdom && e.sameAs(a[0])) }, selecte_type: "dual", windowOptions: { title: "gamerule_choosegeneral_title", timebar: e.responseTime, buttons: ["confirm"] } } }, options: { canCancle: !1, showMainButtons: !1, prompt: "gamerule_choosegeneral" } }) }), async cost (e, a) { sgs.utils.shuffle(e.generalNames), e.generalArea.shuffle(); const s = e.options.chooseGeneralCount * e.playerCount, r = e.generalNames.slice(0, s); if (console.log(r), r.length < s) return await e.gameOver([], "InsufficientQuantityGeneral"), !1; const t = await e.doRequestAll(e.players.map(((a, s) => ({ player: a, get_selectors: { effectId: this.id, name: "choose_general", context: { generals: r.slice(s * e.options.chooseGeneralCount, (s + 1) * e.options.chooseGeneralCount).map((a => { const s = e.getGeneralByName(a); return s[sgs.utils.randomInt(0, s.length - 1)].id })) } } })))); return console.log(r), t.forEach((a => { const s = a.result.results.general.result; console.log(s), e.generalArea.remove(s), a.player.handArea.add(s), s.length < 1 && s.push(e.getGeneral("default.shibingn"), e.getGeneral("default.shibingv")), s.length < 2 && s.push(e.getGeneral("default.shibingn")), a.player.setProperty("_head", s[0].id), a.player.setProperty("_deputy", s[1].id) })), !0 } })), qs.addEffect(sgs.TriggerEffect({ trigger: "InitProperty", priorityType: 5, can_trigger: () => !0, async cost (e, a) { for (const a of e.players) { let e = lodash.toInteger((a.head?.hpmax || 0) + (a.deputy?.hpmax || 0)), s = lodash.toInteger((a.head?.hp || 0) + (a.deputy?.hp || 0)), r = lodash.toInteger((a.head?.shield || 0) + (a.deputy?.shield || 0)); s > e && (s = e), a.setProperty("seat", a.seat), a.setProperty("maxhp", e), a.setProperty("hp", s), a.setProperty("inthp", s), a.setProperty("shield", r), a.setProperty("kingdom", "none") } return !0 } })), qs.addEffect(sgs.TriggerEffect({ trigger: "TurnStart", priorityType: 4, can_trigger (e, a, s) { const { player: r } = s; return r === a && r.hasNoneOpen() }, getSelectors: (e, a) => ({ choose: () => ({ selectors: { option: e.createChooseOptions({ step: 1, count: 1, selectable: a.handles }) }, options: { canCancle: !0, prompt: "gamerule_open", showMainButtons: !1 } }) }), async cost (e, a, s) { const { from: r } = s, t = e.createEventData(sgs.DataType.OpenEvent, { player: r, generals: [r.head], source: a, reason: this.name }), n = e.createEventData(sgs.DataType.OpenEvent, { player: r, generals: [r.deputy], source: a, reason: this.name }), i = e.createEventData(sgs.DataType.OpenEvent, { player: r, generals: [r.head, r.deputy], source: a, reason: this.name }), o = []; o.push((t.check() ? "" : "!") + "openHead"), o.push((n.check() ? "" : "!") + "openDeputy"), o.push((i.check() ? "" : "!") + "openAll"), s.handles = o; const g = (await e.doRequest({ player: r, get_selectors: { effectId: this.id, name: "choose", context: s } })).result.results.option.result; return g.includes("openHead") && await e.open(t), g.includes("openDeputy") && await e.open(n), g.includes("openAll") && await e.open(i), !0 } })), qs.addEffect(sgs.TriggerEffect({ trigger: "StateChanged", priorityType: 4, can_trigger: (e, a, s) => s.is(sgs.DataType.OpenEvent) && s.player === a, async cost (e, a, s) { const { from: r } = s; if ("gamerule_wars_open" === a.reason && a.is_open_head) { const a = ["wars.lord_liubei", "wars.lord_caocao", "wars.lord_zhangjiao", "wars.lord_sunquan", "wars.lord_simayi"], s = ["wars.liubei", "wars.caocao", "wars.zhangjiao", "wars.sunquan", "wars.simayi_jin"]; if (1 === e.getHistorys(sgs.DataType.TurnEvent, (e => e.player === r)).length && s.includes(r.head?.name)) { const t = s.findIndex((e => e === r.head.name)); -1 !== t && e.getGeneral(a[t]) } } return r.definWarsKindom(), !0 } })); const Bs = sgs.GameMode({ name: "wars", maxPlayer: 10, settings: [], rules: qs }); sgs.loadTranslation({ InsufficientQuantityGeneral: "武将牌数量不足", gamerule_choosegeneral_title: "请选择两张势力相同的武将牌", "@gamerule_choosegeneral": "", "@@gamerule_choosegeneral": "选择武将牌", "@gamerule_open": "请选择要明置的武将牌", "@@gamerule_open": "明置武将牌", openHead: "明置主将", openDeputy: "明置副将", openAll: "全部明置" }), e.GuozhanDefaultGenerals = wa, e.GuozhanPowerCards = a, e.GuozhanStandardCards = g, e.GuozhanStandardGenerals = Ca, e.bian = t, e.buchen = o, e.game_wars_rules = qs, e.jin = i, e.mode_wars = Bs, e.quan = n, e.shi = r, e.yiyidailao = Os, e.yiyidailao_choose = js, e.yuanjiaojingong = zs, e.zhen = s, e.zhijizhibi = Rs, e.zhijizhibi_choose = Ms }({});
